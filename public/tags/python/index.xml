<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on * IN SHADOW</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on * IN SHADOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python调用tcpdump监管流量去向</title>
      <link>/post/tcpdump-py/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tcpdump-py/</guid>
      <description>冬至到了先给大家拜个晚年（说完就开起了风扇）
# 请广东尊重一下冬天
问题 偶尔会有访问到alphabet系列网站的时候被recaptcha识别为危险链接
纳了闷儿了平时也没D谷歌啊莫不是流量被什么邪恶势力拦截了。想借个练手的机会试一下python脚本套用tcpdump做一些简单的运维工作。
分析 tcpdump读取流量 有可能被识别为危险流量大概是过于频繁发送流量。由于使用的流量代理，几个朋友也会同时用这台服务器代理过去访问，而且还有几个是油管通，产生大量流量也正常。
先使用tcpdump筛选出出口网卡的发包： tcpdump -i ens3 -t -nn &#39;src &amp;lt;server-public-ip-address&amp;gt;&#39;
其中-i指示网卡，可以通过ifconfig或者cat /proc/net/dev查询。-t去除时间，-nn不显示域名直接显示ip地址
tcpdump已经给了基础的格式化，使用awk截断可以获取目标地址，并丢到文件里做记录：|awk &#39;{print $4}&#39; 1&amp;gt; /tmp/test.log
多线程、log截断、计数、保存记录 多线程：因为tcpdump调用是持续占用stdout的，而且包流量也比较大，在python里使用双线程一路调用tcpdump，另一路专门做定时的截断、统计、记录。
log截断：将文件移动到新的名字（指定）造成记录截断，就可以不用暂停tcpdump的输出结果持续统计无漏
计数：每间隔一段时间截断刚刚由tcpdump产生的文件，使用collections的Counter对文件里的地址进行统计，以地址为key计数。
保存记录：毕竟总不能一直盯着terminal看，就保存到文件里以后再统一分析吧，构建了专门用于record的方法，以便统一指定输出方式
从ip地址到地理地址 geoip-database是一个IP到国家的关系映射数据库，geoip是一套用于查询的库与工具。arch上包为geoip，debian系为geoip-bin
使用geoiplookup &amp;lt;ip-address&amp;gt;对ip地址进行地理寻址（愣
python代码 第一部分获取网卡、地址并生成用于并发线程调用的命令
netdev=os.popen(&amp;quot;cat /proc/net/dev|grep en|awk -F &#39;:&#39; &#39;{print $1}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 指定网卡，可以使用/proc/net/dev与ifconfig查看 src_ban=&amp;quot; src &amp;quot;+os.popen(&amp;quot;ifconfig &amp;quot;+netdev+&amp;quot; |grep inet|grep -v inet6|awk &#39;{print $2}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 获取该网卡使用的地址，在tcpdump中只检查该源地址发出的包 # 函数提供一个对目标地址的过滤参数接口，可以不对某些终点地址进行过滤 def tcpdumppy(*dst_ban): cmd=&amp;quot;sudo tcpdump -i &amp;quot;+netdev+&amp;quot; -t -nn &#39; &amp;quot;+src_ban for i in dst_ban: cmd+=&amp;quot; and !</description>
    </item>
    
    <item>
      <title>數字圖像處理結課課題 二維離散傅里葉頻譜（正逆變換）</title>
      <link>/post/fourier/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/fourier/</guid>
      <description>相關知識 傅里葉 理論基礎：任何函數都可以表示成正弦函數的線性組合形式。 應用簡介：將信號從時域或空域轉換到頻域，使用頻域關係來保存對信號的描述。音頻應用方面可用於分頻，均衡器、濾波等。二維離散（圖像）引用方面可以用於圖像分析、增強、降噪等。
簡單的傅里葉音頻解析原理圖
在圖像應用上，RGB色彩模式下，圖像亮度與數值成正比，通過計算一定範圍內的一系列數值，來計算光暗變化的頻率，進而將全圖的頻率掃描映射到頻域，并將映射的結果保存在頻譜圖像上。
二維離散傅里葉變換公式
1
2
在變換出來的圖像中，每一個像素點代表一個頻率值（縱橫方向），亮度代表頻率出現的多少。最中間亮點代表直流分量（不隨空間變化的量，頻率為0），可以看到圖像聚焦于中間一橫。其表達意義在於：圖像僅有在橫向上存在變化的變化率，在垂直方向上變化率幾乎為0。
更多關於頻譜圖的解讀
圖像應用上用於解析、修復條紋： 3
頻譜圖的亮度分佈越集中，畫面越柔和，則原圖畫面越平緩。若亮點四散分佈，則畫面又較強條幅、亮度差異等情況。
工具使用 python  opencv-python (import: cv2)
 numpy (快速運算矩陣)
   opencv 基本使用
cv2.imshow(&#39;imageName1&#39;,cv2.imread(&amp;quot;./img/cloud.jpg&amp;quot;))顯示圖像
cv2.waitKey()imshow配套使用，阻塞線程
cv2.imwrite(&#39;imageName.png&#39;,img)寫入圖像
 導入包：
import math import cv2;# package: opencv-python import numpy as np;  傅里葉變換：
def Fourier(originImg): # this function offer a O(n^4) method to load gray pixel one-by-one # to calculate Fourier image of param image # : param originImg: offer an image read by gray uint8(default) width, height = originImg.</description>
    </item>
    
  </channel>
</rss>