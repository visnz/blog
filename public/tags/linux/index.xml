<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on * IN SHADOW</title>
    <link>/tags/linux/</link>
    <description>Recent content in Linux on * IN SHADOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python调用tcpdump监管流量去向</title>
      <link>/post/tcpdump-py/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tcpdump-py/</guid>
      <description>冬至到了先给大家拜个晚年（说完就开起了风扇）
# 请广东尊重一下冬天
问题 偶尔会有访问到alphabet系列网站的时候被recaptcha识别为危险链接
纳了闷儿了平时也没D谷歌啊莫不是流量被什么邪恶势力拦截了。想借个练手的机会试一下python脚本套用tcpdump做一些简单的运维工作。
分析 tcpdump读取流量 有可能被识别为危险流量大概是过于频繁发送流量。由于使用的流量代理，几个朋友也会同时用这台服务器代理过去访问，而且还有几个是油管通，产生大量流量也正常。
先使用tcpdump筛选出出口网卡的发包： tcpdump -i ens3 -t -nn &#39;src &amp;lt;server-public-ip-address&amp;gt;&#39;
其中-i指示网卡，可以通过ifconfig或者cat /proc/net/dev查询。-t去除时间，-nn不显示域名直接显示ip地址
tcpdump已经给了基础的格式化，使用awk截断可以获取目标地址，并丢到文件里做记录：|awk &#39;{print $4}&#39; 1&amp;gt; /tmp/test.log
多线程、log截断、计数、保存记录 多线程：因为tcpdump调用是持续占用stdout的，而且包流量也比较大，在python里使用双线程一路调用tcpdump，另一路专门做定时的截断、统计、记录。
log截断：将文件移动到新的名字（指定）造成记录截断，就可以不用暂停tcpdump的输出结果持续统计无漏
计数：每间隔一段时间截断刚刚由tcpdump产生的文件，使用collections的Counter对文件里的地址进行统计，以地址为key计数。
保存记录：毕竟总不能一直盯着terminal看，就保存到文件里以后再统一分析吧，构建了专门用于record的方法，以便统一指定输出方式
从ip地址到地理地址 geoip-database是一个IP到国家的关系映射数据库，geoip是一套用于查询的库与工具。arch上包为geoip，debian系为geoip-bin
使用geoiplookup &amp;lt;ip-address&amp;gt;对ip地址进行地理寻址（愣
python代码 第一部分获取网卡、地址并生成用于并发线程调用的命令
netdev=os.popen(&amp;quot;cat /proc/net/dev|grep en|awk -F &#39;:&#39; &#39;{print $1}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 指定网卡，可以使用/proc/net/dev与ifconfig查看 src_ban=&amp;quot; src &amp;quot;+os.popen(&amp;quot;ifconfig &amp;quot;+netdev+&amp;quot; |grep inet|grep -v inet6|awk &#39;{print $2}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 获取该网卡使用的地址，在tcpdump中只检查该源地址发出的包 # 函数提供一个对目标地址的过滤参数接口，可以不对某些终点地址进行过滤 def tcpdumppy(*dst_ban): cmd=&amp;quot;sudo tcpdump -i &amp;quot;+netdev+&amp;quot; -t -nn &#39; &amp;quot;+src_ban for i in dst_ban: cmd+=&amp;quot; and !</description>
    </item>
    
    <item>
      <title>~~Arch~~ Linux 簡單記錄</title>
      <link>/post/arch-i8so/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/arch-i8so/</guid>
      <description>记录下平时可能会用到的（查阅用）
18.12.22 DNSMasq服务使用本地做DNS缓存：echo &amp;quot;listen-address=127.0.0.1&amp;quot; &amp;gt;&amp;gt; /etc/dnsmasq.conf
添加本地解析：/etc/resolv.conf在最开头添加本地解析为最先
防止篡改：sudo chattr +i /etc/resolv.conf
18.12.20 dig所在软件包dnsutils
systemd图形化界面包systemd-ui
steam 冬季大促销 泼皮买了个linux上能跑的，可爱，想玩
包名：steam steam-native-runtime(multilib)
报了找不到~/.local/share/Steam/ubuntu12_32/steam-runtime/run.sh的错
補了包：fontconfig lib32-fontconfig nvidia-dkms nvidia-utils lib32-nvidia-utils
（nvidia与nvidia-dkms冲突，慎）
18.12.17 libvirt虚拟机 基于KVM，libvirt提供一系列虚拟机服务的集合（包括virt-manager图形化界面、命令控制工具virsh、守护进程libvirtd）
依赖firewalld、ebtables、dnsmasq
安装后手动启动libvirtd、firewalld守护进程开始使用
libvirt没有载入default网络，位置在/etc/libvirt/qemu/networks/default.xml sudo virsh net-define /etc/libvirt/qemu/networks/default.xml载入服务并重启守护进程。
virsh net-autostart default标记自动启动
18.12.15 git 指定密钥登陆 ./.ssh/config
Host github.com HostName github.com IdentityFile ~/.ssh/$priviteKey User git Host new.visn.online HostName new.visn.online IdentityFile ~/.ssh/archlinux Port 20069 User visn  其中$priviteKey为登记在github setting中的公密钥对的密钥
sshd端口修改 指定端口：echo &#39;Port=20069&#39; &amp;gt;&amp;gt; /etc/ssh/sshd_config</description>
    </item>
    
    <item>
      <title>Systemd 扎記</title>
      <link>/post/systemd/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/systemd/</guid>
      <description>簡述 # sell my underpant to systemd #
 systemd(System Daemon, 系統守護進程)：是一個Linux的系統與服務管理器，由systemctl進行控制，支援系統快照與回復系統狀態，支持自動掛載等。已完美取代sysvinit
 系統啓動過程：
 BIOS/UEFI啓動 GRUB引導啓動 尋找/boot(GSP分區)並載入內核 CPUIDLE與內核初始化(PID=0) /sbin/init（systemd啓動，PID=1） fork啓動systemd註冊的基層服務  不同進程工具檢出PID=1的進程不一樣，systemd（pstree -Apn檢出結果）或是/sbin/init（ps -aux檢出結果）
$ ls -al /sbin/init lrwxrwxrwx 1 root root 22 Nov 26 21:35 /sbin/init -&amp;gt; ../lib/systemd/systemd   基本使用  systemctl：進入主界面
 systemctl --failed查看启动失败的单元
 systemctl start/enable/disable/stop/restart/mask/unmask &amp;lt;Unit&amp;gt;：相應地對一個unit進行操作
 systemctl daemon-reload：掃描新的有變動的單元，通常更新配置後需要使用
 圖形化管理界面：systemd-ui
 遠程管理：systemctl -H root@example
 systemctl list-unit-files --type=service：列出可用單元及其情況（指定service類型）
 systemd-*系列也提供了許多方便實用的工具
 systemd-analyze blame：分析啓動時花費的時間</description>
    </item>
    
    <item>
      <title>OVTR 視覺化tracert 日好幾把炫酷（然並卵）</title>
      <link>/post/ovtr/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ovtr/</guid>
      <description> 開始 在某大佬博客（忘了哪位）看到用ping且召喚出了地圖可視化，大概是像這種
1
感覺：
一路找下來發現一款好老的開源軟件Open Visual Traceroute（基於Java、MAXMIND GeoIP2 DB）
在線追蹤的可以使用IPIP可以選擇全球300多線路發送ICMP tracert測試
安裝 archlinuxcn/openvisualtraceroute，安裝後可以在菜單裏找到相應名字
由於第一次使用需要初始化GeoIP DB，不知道是否線路問題無法下載
命令行代理啓動sudo proxychains ovtr初始化DB，以後就在Desktop啓動就OK啦
Enjoy！
 http://www.mantingfeng.com/?p=618 [return]   </description>
    </item>
    
    <item>
      <title>Linux 筆記大整理 &amp; 工具備忘錄</title>
      <link>/post/linux/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/linux/</guid>
      <description>基本工具  df、fdisk、fdisk等基本硬盤查看工具
 ls：基本是自帶--color=auto這個地燈設置。
 -al列出隱藏與詳細信息
 -Csh着色、大小顯示
 -R超詳細目錄信息
  tty查看当前 tty 终端=&amp;gt;/dev/pts/*，可以用于重定向输出
 init * runlevel
 &amp;amp;丢后台
 后台任务检查jobs任务管理器top/htop、ps -ax
 内存检查free
 端口占用检查netstat -anp|grep [port]、lsof -i
 变量修改：export LANG=zh_CN.UTF-8变量追加：export LANG=$LANG:en_US.UTF-8
 sudo组：echo &amp;quot;%sudoer ALL=(ALL:ALL) ALL&amp;quot;&amp;gt;&amp;gt; /etc/sudoers
 dd if=* of=* bs=1M count=200
 查看查找：file、type、whereis
 locate：查找，使用 mlocate 包，使用 updatedb 更新数据库
 chattr設置文件安全屬性（lsattr現實）
 A atime訪問時間不會因爲訪問而修改（隱藏讀取痕跡）
 S 數據立即寫入，不參與緩存（適合重要數據寫入，防止斷電丟失）
 a append追加寫入權限（適用於log、passwd文件）
 c 壓縮加密文件，以時間換空間（長時間一次的大文件讀寫存儲等）</description>
    </item>
    
  </channel>
</rss>