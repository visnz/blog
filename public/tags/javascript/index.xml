<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on * IN SHADOW</title>
    <link>/tags/javascript/</link>
    <description>Recent content in Javascript on * IN SHADOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Puppeteer初体验 &amp; 爬网课视频</title>
      <link>/post/pupeteer/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/pupeteer/</guid>
      <description>背景 手痒点了Coursera课程试听，忘了这回事直到PayPal提示我一笔60美元的支出（心如刀割）。想想认真听课要不把它录下来，以后可以看。一个一个抓太麻烦…索性写个爬虫把视频都爬下来好了…
分析 日常万能抓的Video Downloader professional抓不了 网页源码里却如此露骨，还是静态的 未注册访问Coursera是可以访问到（我所购买课程）的所有课程，视频所在网址如https://www.coursera.org/learn/daoyan-siwei-weiyingren/lecture/0W13U/fen-jing-tou-jiao-ben，中间有一个五位/[A-z0-9]/防爬的文本，禁止爬虫直接根据名字爬到视频页面。
通过Puppeteer模拟登陆，内部抓取所有视频的网址。再用Puppeteer自动打开网页抓取视频链接，再用下载工具批量下载重命名
（虽然后来发现模拟登陆后更麻烦…索性一个一个自己复制了…）
工具  Nodejs
 Puppeteer：无图形化运行chrome的API
  编码 npm install --save puppeteer
不少教程给了截图示例，代码内容也一目了然
async function getPic() { const browser = await require(&#39;puppeteer&#39;).launch(); const page = await browser.newPage(); await page.goto(&#39;https://google.com&#39;); await page.screenshot({path: &#39;./google.png&#39;}); await browser.close(); }  模拟点击 因为视频页面需要点击播放，视频区域才会被替换成视频链接，所以使用puppeteer本身浏览器模拟点击的API 通过css选择器找到点击的区域，调用page.click(&amp;quot;选择器的复制内容&amp;quot;)即可
最终 给定一系列键值对（排序编号为键，有视频的网页地址为值）
var page = await browser.newPage(); //打开新页面 await page.goto(addr[&amp;quot;value&amp;quot;],{ timeout: 50000}); //跳转网页，重订超时时间 await page.waitFor(5000); //等待网页打开 console.log(&amp;quot;in &amp;quot;+addr[&amp;quot;value&amp;quot;]); await page.click(&amp;quot;#rendered-content &amp;gt; div &amp;gt; div &amp;gt; section &amp;gt; div.</description>
    </item>
    
    <item>
      <title>修复ae中英版本差异导致js表达式错误</title>
      <link>/post/aeexpfix/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/aeexpfix/</guid>
      <description> 背景 下载一些模板打开之后发现预览窗口下警告“表达式错误”，导致效果无法显示
原因：通常是因为原来的模板，在使用系统组件的表达式中引用了英文，在中文的ae中打开后，系统组件无法被正确引用。
解决思路 手动修bug法：在图层表达式中修复引用 把英文名引用换用中文名，量小的时候建议修复，量多的话参考第二个解决思路
中英的关系如下：
 滑块 = Slider
 角度 = Angle
 复选框 = Checkbox
 颜色 = Color
 点 = Point
 图层 = Layer
 3D 点 = 3DPoint
  通过提示直接查找每一个错误的引用，将引用（在图层里，通常是红色代表出错）的表达式里的英文，转成对应的中文
发现错误，找到表达式如下：
打开“Your Text”图层，效果如下
将“Fast Blur”改为“快速模糊（旧版）” 提示仍有错误，根据提示将“Blurriness”改为“模糊度”，成功改正错误
一劳永逸法：修改底层中英引用 软件里的系统组件的语言文本，将中文引用改为英文引用，其他不变，使其适配英文表达式。出现大量错误时候推荐，一劳永逸
在Support Files-zdictionaries（win）或Contents/Dictionaries/zh_CN（mac）文件夹（语言文件相关）下，找到after_effects_zh-Hans.dat
改动常见的语言错误如下图。（中英对应解决方案1中的中英映射）
之后 reload AE 即可
总结 你看这个ae英文版它又大又圆，真香。
参考资料  贴吧吧友解决方案
 表达式修复工具
 详细修复及原理博客
  </description>
    </item>
    
  </channel>
</rss>