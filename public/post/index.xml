<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on * IN SHADOW</title>
    <link>/post/</link>
    <description>Recent content in Posts on * IN SHADOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python调用tcpdump监管流量去向</title>
      <link>/post/tcpdump-py/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tcpdump-py/</guid>
      <description>冬至到了先给大家拜个晚年（说完就开起了风扇）
# 请广东尊重一下冬天
问题 偶尔会有访问到alphabet系列网站的时候被recaptcha识别为危险链接
纳了闷儿了平时也没D谷歌啊莫不是流量被什么邪恶势力拦截了。想借个练手的机会试一下python脚本套用tcpdump做一些简单的运维工作。
分析 tcpdump读取流量 有可能被识别为危险流量大概是过于频繁发送流量。由于使用的流量代理，几个朋友也会同时用这台服务器代理过去访问，而且还有几个是油管通，产生大量流量也正常。
先使用tcpdump筛选出出口网卡的发包： tcpdump -i ens3 -t -nn &#39;src &amp;lt;server-public-ip-address&amp;gt;&#39;
其中-i指示网卡，可以通过ifconfig或者cat /proc/net/dev查询。-t去除时间，-nn不显示域名直接显示ip地址
tcpdump已经给了基础的格式化，使用awk截断可以获取目标地址，并丢到文件里做记录：|awk &#39;{print $4}&#39; 1&amp;gt; /tmp/test.log
多线程、log截断、计数、保存记录 多线程：因为tcpdump调用是持续占用stdout的，而且包流量也比较大，在python里使用双线程一路调用tcpdump，另一路专门做定时的截断、统计、记录。
log截断：将文件移动到新的名字（指定）造成记录截断，就可以不用暂停tcpdump的输出结果持续统计无漏
计数：每间隔一段时间截断刚刚由tcpdump产生的文件，使用collections的Counter对文件里的地址进行统计，以地址为key计数。
保存记录：毕竟总不能一直盯着terminal看，就保存到文件里以后再统一分析吧，构建了专门用于record的方法，以便统一指定输出方式
从ip地址到地理地址 geoip-database是一个IP到国家的关系映射数据库，geoip是一套用于查询的库与工具。arch上包为geoip，debian系为geoip-bin
使用geoiplookup &amp;lt;ip-address&amp;gt;对ip地址进行地理寻址（愣
python代码 第一部分获取网卡、地址并生成用于并发线程调用的命令
netdev=os.popen(&amp;quot;cat /proc/net/dev|grep en|awk -F &#39;:&#39; &#39;{print $1}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 指定网卡，可以使用/proc/net/dev与ifconfig查看 src_ban=&amp;quot; src &amp;quot;+os.popen(&amp;quot;ifconfig &amp;quot;+netdev+&amp;quot; |grep inet|grep -v inet6|awk &#39;{print $2}&#39;&amp;quot;).read().split(&#39;\n&#39;)[0] # 获取该网卡使用的地址，在tcpdump中只检查该源地址发出的包 # 函数提供一个对目标地址的过滤参数接口，可以不对某些终点地址进行过滤 def tcpdumppy(*dst_ban): cmd=&amp;quot;sudo tcpdump -i &amp;quot;+netdev+&amp;quot; -t -nn &#39; &amp;quot;+src_ban for i in dst_ban: cmd+=&amp;quot; and !</description>
    </item>
    
    <item>
      <title>~~Arch~~ Linux 簡單記錄</title>
      <link>/post/arch-i8so/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/arch-i8so/</guid>
      <description>记录下平时可能会用到的（查阅用）
18.12.22 DNSMasq服务使用本地做DNS缓存：echo &amp;quot;listen-address=127.0.0.1&amp;quot; &amp;gt;&amp;gt; /etc/dnsmasq.conf
添加本地解析：/etc/resolv.conf在最开头添加本地解析为最先
防止篡改：sudo chattr +i /etc/resolv.conf
18.12.20 dig所在软件包dnsutils
systemd图形化界面包systemd-ui
steam 冬季大促销 泼皮买了个linux上能跑的，可爱，想玩
包名：steam steam-native-runtime(multilib)
报了找不到~/.local/share/Steam/ubuntu12_32/steam-runtime/run.sh的错
補了包：fontconfig lib32-fontconfig nvidia-dkms nvidia-utils lib32-nvidia-utils
（nvidia与nvidia-dkms冲突，慎）
18.12.17 libvirt虚拟机 基于KVM，libvirt提供一系列虚拟机服务的集合（包括virt-manager图形化界面、命令控制工具virsh、守护进程libvirtd）
依赖firewalld、ebtables、dnsmasq
安装后手动启动libvirtd、firewalld守护进程开始使用
libvirt没有载入default网络，位置在/etc/libvirt/qemu/networks/default.xml sudo virsh net-define /etc/libvirt/qemu/networks/default.xml载入服务并重启守护进程。
virsh net-autostart default标记自动启动
18.12.15 git 指定密钥登陆 ./.ssh/config
Host github.com HostName github.com IdentityFile ~/.ssh/$priviteKey User git Host new.visn.online HostName new.visn.online IdentityFile ~/.ssh/archlinux Port 20069 User visn  其中$priviteKey为登记在github setting中的公密钥对的密钥
sshd端口修改 指定端口：echo &#39;Port=20069&#39; &amp;gt;&amp;gt; /etc/ssh/sshd_config</description>
    </item>
    
    <item>
      <title>docker上手 生产环境大搬家</title>
      <link>/post/docker/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/docker/</guid>
      <description>起因 帮 viktorika的项目 学习打包的时候，写了个脚本手抖把个目录给删了，不得不重装系统，经过深思熟虑之后决定做以下三件事
 拆分/home、/
 timeshift定期备份
 使用docker创建测试环境
  拆分目录 意外怀孕炸机头疼莫过于平时丢在/home/里杂乱的工作文件没有搜集起来（特别是多人用户机系统崩溃时），所以不如直接把根目录拆分出来（根治），如debian安装引导的时候说的“高级玩法”
至于在/etc下配置文件以及多平台同步生产环境等问题：
 [ ] dotfile repo of mine ： setup require
 [x] 多平台生产环境：Chromium+vscode setting sync就是我的生产力
  在重装系统的时候将原有的/dev/sdd3分割成40G跟175G
按照原先的顺序先挂根目录到/mnt，再创建/mnt/boot、/mnt/home。
原本是想/var跟/usr跟/opt也一起拆了的，后来感觉分太多也麻烦没必要，杂乱文件也很多，毕竟每次出问题只格/dev/sdd4一件重装软件效果体验更佳（只要家在就行）
TimeShift定期备份 用了一把梭打包TimeShift定期备份，还好系统不大，不然得活生生把根目录给吃掉
TimeShift支持快照迁移到心的电脑上，在恢复快照之前，TimeShift会询问你是不是需要保存现有的应用设置，并且选择保存哪一个。TimeShift需要GRUB 2启动进入快照恢复。
一分钟不到就备份好了，不过没有尝试做容灾测试（可不敢手贱再把目录删一次了）
部署本地docker  什么是docker
 为什么是docker
 docker的基本使用
  一来是不直接在现有的环境上动手，风险也不小。
二是有通用的测试平台，有标准衡量与足够的试错机会。
# 换国内阿里云源 sudo echo &#39;{&amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://dftbcros.mirror.aliyuncs.com&amp;quot;]}&#39;&amp;gt;&amp;gt;/etc/docker/daemon.json # 启动服务 sudo systemctl daemon-reload &amp;amp;&amp;amp; sudo systemctl enable docker --now # 获取镜像 sudo docker pull debian sudo docker pull ubuntu  由镜像创建实例：</description>
    </item>
    
    <item>
      <title>Systemd 扎記</title>
      <link>/post/systemd/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/systemd/</guid>
      <description>簡述 # sell my underpant to systemd #
 systemd(System Daemon, 系統守護進程)：是一個Linux的系統與服務管理器，由systemctl進行控制，支援系統快照與回復系統狀態，支持自動掛載等。已完美取代sysvinit
 系統啓動過程：
 BIOS/UEFI啓動 GRUB引導啓動 尋找/boot(GSP分區)並載入內核 CPUIDLE與內核初始化(PID=0) /sbin/init（systemd啓動，PID=1） fork啓動systemd註冊的基層服務  不同進程工具檢出PID=1的進程不一樣，systemd（pstree -Apn檢出結果）或是/sbin/init（ps -aux檢出結果）
$ ls -al /sbin/init lrwxrwxrwx 1 root root 22 Nov 26 21:35 /sbin/init -&amp;gt; ../lib/systemd/systemd   基本使用  systemctl：進入主界面
 systemctl --failed查看启动失败的单元
 systemctl start/enable/disable/stop/restart/mask/unmask &amp;lt;Unit&amp;gt;：相應地對一個unit進行操作
 systemctl daemon-reload：掃描新的有變動的單元，通常更新配置後需要使用
 圖形化管理界面：systemd-ui
 遠程管理：systemctl -H root@example
 systemctl list-unit-files --type=service：列出可用單元及其情況（指定service類型）
 systemd-*系列也提供了許多方便實用的工具
 systemd-analyze blame：分析啓動時花費的時間</description>
    </item>
    
    <item>
      <title>OVTR 視覺化tracert 日好幾把炫酷（然並卵）</title>
      <link>/post/ovtr/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ovtr/</guid>
      <description> 開始 在某大佬博客（忘了哪位）看到用ping且召喚出了地圖可視化，大概是像這種
1
感覺：
一路找下來發現一款好老的開源軟件Open Visual Traceroute（基於Java、MAXMIND GeoIP2 DB）
在線追蹤的可以使用IPIP可以選擇全球300多線路發送ICMP tracert測試
安裝 archlinuxcn/openvisualtraceroute，安裝後可以在菜單裏找到相應名字
由於第一次使用需要初始化GeoIP DB，不知道是否線路問題無法下載
命令行代理啓動sudo proxychains ovtr初始化DB，以後就在Desktop啓動就OK啦
Enjoy！
 http://www.mantingfeng.com/?p=618 [return]   </description>
    </item>
    
    <item>
      <title>Google Calendar nodejs作轉發服務器 媽媽再也不擔心看不到我</title>
      <link>/post/cal-fwd/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/cal-fwd/</guid>
      <description>問題  心繫家庭，將自己的行程表分享給家人，不失爲加強聯絡的一個方法。
 世界上最遠的距離不是6881公里，而是分享 Google Calendar 日程表到媽媽的手機裏
  解決  因爲設置了cal的公開地址，寫個轉發服務器即可。
 因爲不是谷歌服務的體系，沒有實施更新與推送，只能自己做心跳同步。
 想借機搭建一下https服務器的看了大廠ca價格就軟了，Let&amp;rsquo;s Encrypt開源證書玩一下下 -&amp;gt; 開源證書安裝教程
 SSL提供安全套接層，在HTTP傳輸數據時提供非對稱加密。通常需要申請第三方認證機構獲取CA證書，年費多分佈在四位數到五位數，按域名算加成，需要定期續費。加密原理簡介
 Let&amp;rsquo;s Encrypt進行域名認證，要求在生成認證的時候在服務器上指定用於訪問獲取的指定隨機文件，用於驗證。
   ssl方面 # server openssl genrsa 4096 &amp;gt; account.key openssl genrsa 4096 &amp;gt; domain.key # 創建用戶key 域名key openssl req -new -sha256 -key domain.key -subj &amp;quot;/CN=example.com&amp;quot; &amp;gt; domain.csr # 驗證域名 mkdir /var/www/html/.well-known/ mkdir /var/www/html/.well-known/acme-challenge/ # 用了無腦爆炸的apache2驗證方式，創建等會驗證時候訪問的目錄 # 嗯僅作嘗試，正規驗證千萬別這樣 wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py python acme_tiny.py --account-key .</description>
    </item>
    
    <item>
      <title>Linux 筆記大整理 &amp; 工具備忘錄</title>
      <link>/post/linux/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/linux/</guid>
      <description>基本工具  df、fdisk、fdisk等基本硬盤查看工具
 ls：基本是自帶--color=auto這個地燈設置。
 -al列出隱藏與詳細信息
 -Csh着色、大小顯示
 -R超詳細目錄信息
  tty查看当前 tty 终端=&amp;gt;/dev/pts/*，可以用于重定向输出
 init * runlevel
 &amp;amp;丢后台
 后台任务检查jobs任务管理器top/htop、ps -ax
 内存检查free
 端口占用检查netstat -anp|grep [port]、lsof -i
 变量修改：export LANG=zh_CN.UTF-8变量追加：export LANG=$LANG:en_US.UTF-8
 sudo组：echo &amp;quot;%sudoer ALL=(ALL:ALL) ALL&amp;quot;&amp;gt;&amp;gt; /etc/sudoers
 dd if=* of=* bs=1M count=200
 查看查找：file、type、whereis
 locate：查找，使用 mlocate 包，使用 updatedb 更新数据库
 chattr設置文件安全屬性（lsattr現實）
 A atime訪問時間不會因爲訪問而修改（隱藏讀取痕跡）
 S 數據立即寫入，不參與緩存（適合重要數據寫入，防止斷電丟失）
 a append追加寫入權限（適用於log、passwd文件）
 c 壓縮加密文件，以時間換空間（長時間一次的大文件讀寫存儲等）</description>
    </item>
    
    <item>
      <title>VSCode記 Gists同步部署生產環境(Atom&amp;Vim)</title>
      <link>/post/gists/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/gists/</guid>
      <description>問題描述  擁有不止一個生產環境，而且這些生產環境也不一定持久的情況下（隨時有可能一鍵重裝、部署新機器），不同生產環境要求有相同的配置（同步需求）
 有隨時隨地看到好 extensions 就想 install 的壞習慣
 作為生產力工具，需要快速、自動化、可管理的部署以減少不必要損失（包括不限於擴展配置）
  解決 使用較為小型的私人代碼在線託管服務（大型網路里專門用於管理配置的配置服務器），將配置代碼上傳託管，按需獲取。有安全需求可自建機器與認證。
VSCode VSCode 中有一個提供 Setting Sync Anywhere 的擴展，使用 Github 提供的 Gists 服務，短代碼在線託管（允許版本管理）
Setting Sync 基本步驟如下：
 github里生成gist token（用於身份分離認證 複製保存好）
 vscode中使用setting sync擴展進行同步：upload，產生一個公開的以Username、gistID為依據的網頁（每次更新配置都會產生新的gistID，注意保存）
 獲取gist ID（可以在github gists 服務里找到URL最後一個便是），同步的時候使用gistID、token獲得
  詳細操作步驟參考
Atom Atom裏也有支持設置同步的sync-settings
apm install sync-setting
也需要提供gist token 不過需要自己手動在gists上創建一個gist
將gistID在設置中設置
vim vim方面寫了個js腳本來完成下載 上傳就懶得寫了直接webpage edit一下得了（懶
const https=require(&amp;quot;https&amp;quot;) const fs = require(&#39;fs&#39;); const gistID=&amp;quot;------------------------------------&amp;quot; const remoteFilename=&amp;quot;--------------&amp;quot; const filepath=&amp;quot;------------------------&amp;quot; download(gistID,remoteFilename,filepath) //提供指定gistID，遠程文件名（嗯目前只支持了一個），以及保存的地方 function download(gistID,remoteFilename,filepath){ //調用github api，獲取指定gist的相關信息 //需要附上headers https.</description>
    </item>
    
    <item>
      <title>數字圖像處理結課課題 二維離散傅里葉頻譜（正逆變換）</title>
      <link>/post/fourier/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/fourier/</guid>
      <description>相關知識 傅里葉 理論基礎：任何函數都可以表示成正弦函數的線性組合形式。 應用簡介：將信號從時域或空域轉換到頻域，使用頻域關係來保存對信號的描述。音頻應用方面可用於分頻，均衡器、濾波等。二維離散（圖像）引用方面可以用於圖像分析、增強、降噪等。
簡單的傅里葉音頻解析原理圖
在圖像應用上，RGB色彩模式下，圖像亮度與數值成正比，通過計算一定範圍內的一系列數值，來計算光暗變化的頻率，進而將全圖的頻率掃描映射到頻域，并將映射的結果保存在頻譜圖像上。
二維離散傅里葉變換公式
1
2
在變換出來的圖像中，每一個像素點代表一個頻率值（縱橫方向），亮度代表頻率出現的多少。最中間亮點代表直流分量（不隨空間變化的量，頻率為0），可以看到圖像聚焦于中間一橫。其表達意義在於：圖像僅有在橫向上存在變化的變化率，在垂直方向上變化率幾乎為0。
更多關於頻譜圖的解讀
圖像應用上用於解析、修復條紋： 3
頻譜圖的亮度分佈越集中，畫面越柔和，則原圖畫面越平緩。若亮點四散分佈，則畫面又較強條幅、亮度差異等情況。
工具使用 python  opencv-python (import: cv2)
 numpy (快速運算矩陣)
   opencv 基本使用
cv2.imshow(&#39;imageName1&#39;,cv2.imread(&amp;quot;./img/cloud.jpg&amp;quot;))顯示圖像
cv2.waitKey()imshow配套使用，阻塞線程
cv2.imwrite(&#39;imageName.png&#39;,img)寫入圖像
 導入包：
import math import cv2;# package: opencv-python import numpy as np;  傅里葉變換：
def Fourier(originImg): # this function offer a O(n^4) method to load gray pixel one-by-one # to calculate Fourier image of param image # : param originImg: offer an image read by gray uint8(default) width, height = originImg.</description>
    </item>
    
    <item>
      <title>香港XM Anomaly摸魚兩日遊</title>
      <link>/post/hkxma/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/hkxma/</guid>
      <description>緣起&amp;amp;雜事  鹹魚回歸（全身VR滯銷找個機會浪費下）
 找個機會出門休息下（瞎忙到一個段落）
 愛上了自由行這一種破費多事的去別人呆膩了的地方呆一下，之前許多想去沒去的地方，遺憾可適當彌補
 用上了 Calendar 嘗試用來安排旅行行程（詳見Google Calendar 左手日記 右手咕咕）
  計劃  計劃總覽：參加XMA+香港遊玩 地點：香港中環、香港大學、尖沙咀區域 時間：2018年11月16日下午~11月18日晚上  具體行程： - 太平山+杜莎夫人蠟像館 - 夜訪香港 - 香港大學/香港理工大學到訪 - 尖沙咀xma主戰場 - MissionDay 維多利亞港南岸繞行 - 尖沙咀代購
出行 通勤  高鐵從廣州南往深圳北+深圳北往西九龍 = 150元（50分鐘+換乘等待） 高鐵直達西九龍 = 220元（50分鐘）  因為是新列車看起來要更高級舒適一些。
遊覽 杜莎夫人蠟像館在一個商業廣場裡面是沒想到的，曾經以為是單獨的一棟大建築。裡面結構也是沒想到的，一條路像迷宮一樣通到底
“纵观世界风云，风景这边更好” ——趙本山
香港理工大學要比幾年前來的時候感覺更活躍。因為趕上了畢業季，學習的人、慶祝的人都有。因為學校沒有圍墻，我們徑直穿過了學校
從香港理工大學走出到了一個十分繁盲的十字路口
香港大學以長條狀盤山而居（師兄說來了半年還不怎麼認路），而且也沒有校園圍欄，經常分不清哪裡是里外。房屋大多是架空樓閣，半座學校嵌入山林，有流水，空氣清新。適逢動漫社不知道在做啥活動。
XMA XMA報名后帶著電子票到現場簽到
雖然不管怎麼看來現場也是有一點點中二的（蹲
港藍很厲害（給大佬遞茶）大半夜2點多還毒了我的床po，早上起床尖沙咀已經做了個大針包，全線變藍
11點多前去控毒，12點多沒吃早餐午餐就直接開杠了，需要Portal Battle占點（Portal會有顯示分值）。
基本屬於防守方，狂充電+上AXA，被攻破也是一秒內的事情。中途試毒還浪費了幾個綠毒（嗯不怕）
在這麼強烈的戰火下，除了手速要快充電，偶爾沒事也插一下旁邊沒有計分的點，一秒一個1250（WTMSB）
大局已定。除了Portal Battle 還有link的分數（link盡可能遠），還有遊園會（比賽時間內重算戰區UPV）。後來打到累了換人我就帶著@魔術師小姐姐一起過去遊園丟人地發卡（國際丟人了
以及在大戰後半段因為東西不夠而瘋狂補倉 由於不看每次補倉數量導致爆倉 導致大戰結束后upv都是八腳當糖
藍綠和諧藍綠和諧，放下手機就是朋友</description>
    </item>
    
    <item>
      <title>Google Calendar行程表 左手日記 右手咕咕</title>
      <link>/post/calendar/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/calendar/</guid>
      <description>緣起  與別人預約的事情越來越多，單純使用 Markdown 的 todolist 規模過於龐大，而且不支持自動排序，重複事件需要自檢，沒有提醒
 隨時隨地的同步、共享或公開自己的行程內容
 平時想做的事情記在todolist，過幾天就忘了。如果事情沒有被安排上行程，很可能過了熱情以後就不會再想做了，執行力折損。
  選擇  選擇谷歌的原因一大部分是個人歷史原因（駐留谷歌服務，以及新買了谷歌親兒子2自帶Calendar），在調整、創建方面相當簡潔，設計感到位。   另外一個就是谷歌的Keep Notes任務清單可以聯動，同時還擁有chrome extension 隨時隨地 mark 網頁。（不過貌似這塊環境發展緩慢，雖然對我目前來說就夠用了）   同時也推薦微軟體系的Microsoft Outlook（Windows User很推薦）、蘋果體系的Calendar，根據個人習慣以及環境進行選擇  通用簡介  通常都支持多日程表切換，可以根據需要定義如家庭、娛樂、公司等多個日程表，且允許導入其他人的行程表（詳見下文），支持在多維度上切換行程   大部分日程表都擁有完善的設置功能，可以附上地址、文件、鏈接、邀約，以及修改事件的色彩以便區分等。  谷歌特性  谷歌自帶了提醒與日程兩種（蘋果看起來僅提供日程），提醒不會佔用到行程時間，對外不會像日程一樣展示為繁忙狀態   谷歌默認提供簡單模板，也有相對複雜的配置（相對的另外兩個平台都默認提供複雜模板）
 快速同步：Google Calendar會在更改的時候回調同步，并在全平台更新日程表。
   在手機端還有另一個功能：適配時間安排，根據空餘時間安排你鍛煉、學習，以及打電話回家(Yes! It worked for me! )  共享  各種行程表都支持公開只讀共享。Google Calendar開放了多種共享方式（只讀），包括iframe嵌入、REST風格ical地址（公開或私密）、請求網址等多種方式
 各種calendar日程表都支持訂閱其他人的行程表（可以對公展示具體內容，或者顯示該階段有沒有空），不過對訂閱的行程表沒有
 iphone可以在設置 - 用戶與密碼 - 添加其他賬戶 - 添加已訂閱日程表</description>
    </item>
    
    <item>
      <title>日本访学12日游</title>
      <link>/post/nihon/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/nihon/</guid>
      <description>缘起 廣東省教育廳每年寒暑假都會提供國際訪學計劃，此次單純奔著出國見世面心態報名了項目，并提交了護照、近萬元報名費（一個多月沒消息一度以為被忽悠，因為轉賬的賬戶是廣東省交流協會的公戶，所以選擇了等待）
大概流程是這樣：
 遞交申請，聲明資質（學生身份）
 提交材料依次填寫了報名表、簽證名單、簽證申請表、日本簽證照片、護照、個人身份資料複印件，轉賬到賬戶
 等待答復，由協會代理辦理簽證、機票、住宿，安排行程等
 組織聯繫，臨時組隊，出行
  協會的老師給了我們一份相當完備的行前手冊，從行程、文化差異、出行建議、行李攜帶等全方面交代出行事宜，可以作為以後出行安排的範本www
點擊下載
行程簡介  上智大學經濟學課（有結業證書）、文化歷史課、媒體傳播課（英文、中文授課）茶道、浴衣文化課等
 參觀各大學校（早稻田大學、東京大學、立命館大學、京都大學），參觀朝日新聞印刷廠、朝日啤酒流水生產線、水再生中心、X光發射中心
 東京觀光（5天）：淺草寺、秋葉原、原宿、東京塔、台場
 溫泉酒店（大夏天）：浜名湖（鰻魚飯、大閘蟹、溫泉）
 關西觀光（5天）：奈良、神戶、大阪（心齋橋）、京都（伏見稻荷大社千鳥居）
  关东  先教會了我們怎麼穿浴衣（大夏天的穿著裡面一層外面一層），穿著浴衣開始上茶道課。基本是教了抹茶的一些手法、喝茶時候的禮儀、方式等等。   第一頓午飯在一個現在怎麼想都想不起名字的大學里吃的，很簡單的湯飯肉咖啡+沙拉甜點，定食優秀   到日本的第一頓正式的餐飲，在東京繁華地帶的一個居酒屋。   淺草寺是一個寺廟+鬧市的結構，中間由一條幾百米長的商業街連接幾個大門。在這裡求了交通平安跟一對良緣守。   東京不愧是世界上地鐵路線最繁雜的城市。   秋葉原世界著名景點。初音手機廣告視頻聖地巡禮。打卡。   東京塔有點卡時間，天剛暗下來就是我們要離開的時間。在最後離開之前拍到了塔里的等照在玻璃上影射出繁星點點的東京都的樣子。當然還有臨時抓拍的封面那張Tokyo Tower   涉谷的街頭人流量難以言喻。涉谷站的路口五條斑馬線，每次交通燈轉換，最多容納近三千人同行。作為東京繁華的商業街（還有101大廈），霓虹燈與高樓大廈、行人高密度集成。   涉谷八公像，關於忠犬八公的故事源自日本   住宿的地方有一家小小的拉麵店，師傅是福建人，過來日本幾十年了一直經營這家小麵館。濃濃的深夜食堂風格。師傅做麵的時候不理會我在說話，說是專心做麵沒有留意。師傅也告訴我通常是不會跟客人聊天的，因為容易錯過面最好味道的時刻，是對食客不負責任。   日本第三大摩天輪，直徑一百多米，坐一圈下來的時候正好碰到了落日，非常美。900日元每人，15分鐘，價格中等   朝日新聞的印版流水自動化   從關東前往關西的路上，途徑浜名湖住宿，溫泉酒店，有好吃的鰻魚飯、蟹。因為吃完就要泡溫泉，而泡溫泉都是不穿衣服的，不少人都是穿著內褲+浴衣就去吃飯了，場面好不尷尬（畢竟我們沒這習慣呀）吃的男女一起吃，泡就分開泡了（不過據說有混浴）  关西  途經奈良的時候我們也過去參觀東大寺，在路途拍到了帶鳥居的山林。不過季節差得太多，通常到11月12月才有楓葉紅，上面這張是我調的（不要臉地承認了）。角度在東大寺里。   奈良博物館里有一個警示牌，不得在這裡抓寶可夢。嗯看來這文化深入人心   神戶塔，疑似小蠻腰   去伏見稻荷大社的路途經過幾個鐵路口，在日本這樣的十字路口太常見了（秒速五釐米），隨手就是一張日系風格   去心齋橋就鑽進各種扭蛋機的商店里，看來看去就買了幾個比較喜歡的。上圖是蛋黃哥哈哈哈。   淨扭一些奇怪的東西   在心齋橋還斗膽買了你們老婆的寫真集。（正常寫真，即攝影集）   歷史名城大阪，大阪城天守閣是必須打卡的地點。大阪東北方向，夜晚燈光會更美。   一個科學研究機構，通過一個加速通道產生持續、相對安全的X光，并轉入圓形隧道持續放射，提供給項目組進行科學研究。   儘管很多時候都沒趕得上吃正頓（有些時候自己行動），就去便利店買些便當回來吃，其實感覺也不壞，因為冷凍技術跟便利店的普及、產業規模，這些食品又好吃又便宜。（上圖約60人民幣，在日本不算貴）  總體  低慾望社會：日本總體顯得很悲觀，低慾望、藏富於民、悶聲發大財，不少中華傳統被日本人傳承，菊與刀的背景下，一些極端化思想發展，導致了如今總體的社會經濟低迷。</description>
    </item>
    
    <item>
      <title>经济学课程 结课笔记</title>
      <link>/post/eco_end/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/eco_end/</guid>
      <description>家庭缘故，接触经济与金融较早，耳濡目染中对行业有兴趣，平时会关注国内和世界经济状况，无奈专业能力不足，对许多分析评论只听半懂。半年左右挖坑终于把坑填上了，弥补了多年来对该领域关注但从未学基础的遗憾。
教材  早期启蒙读物：《货币战争》
 正统入门：格里高利·曼昆的《经济学原理 第七版 上下两本》
 网易公开课可汗学院的经济学视频课（可汗学院中文站）
 辅助浏览的是广东卫视《财经郎眼》（节目质量一般，郎教授的内容还是值得学习的），以及凤凰卫视《一虎一席谈》的财经话题（推荐）
 额外感谢游戏《城市天际线》在教育与就业的经济学层面带来的启发
 参考资料：MBA智库、维基百科
 推荐扩展读物：《认识商业》
  原书经典摘抄 微观经济学  经济学研究社会如何管理自己的稀缺资源
 效率指社会从稀缺资源中获取的最大利益，平等指将利益分配给社会成员的合理性，是社会宏观层面的权衡取舍
 理性人假设：假设在经济体系中，参与者都是系统而有目的、以最大努力获取最多利益的人。
 当一种行为的边际收益大于边际成本时，一个理性决策者才会选择这种行为
 贸易可以使每个人的状况都要更好，它使人们可以从事自己专业的工作并以此换取更多的资源。
 税收扭曲价格，也扭曲了家庭和企业的决策
 通货膨胀与失业率的关系：短期合理的通货膨胀刺激经济体向好发展，企业扩张，收纳更多员工，失业率下降。反之亦然。
 经济学许多内容仅仅在努力解释世界如何运行，而以经济学为工具的专家想知道如何改善经济。
 价格接受者：假设市场完全竞争，可供应的商品完全相同，且买卖双方人数众多，没有任何一个人可以影响价格。此时看不见的手会起作用。价格决定者：假设市场完全垄断，可供应的商品完全不可替代，且买方独占而卖方需求众多，买方一者影响价格。（进入壁垒高、生产垄断资源、政府监管进行排他性生产、生产有优势等）
 低档产品：随收入增加而需求减少的产品。奢侈产品：随收入增加而需求增加的产品。土豆效应：（ 1927年大萧条时期的土豆）供给上升的同时价格上升（吉芬效应）
 消费者剩余：消费者愿意为商品支付超过平均水平的多少。这个意愿大程度上取决于社会福利。生产者剩余：生产者愿意为商品抬高售价超过最低价的额度。税收与福利同时影响消费者剩余、生产者剩余市场。生产者尽力缩减消费者剩余，提高生产者剩余，消费者反之。
 税收产生无谓损失：引起卖家和买家的离场使得某些利益贸易无法实现，减少总的社会收益
 国际贸易：如果世界价格高于国内价格，国内商品倾向于走出口销售。此时是否开放自由贸易就是难题了：出口导致了国内价格与世界接轨，必然导致国内商品供给减少，价格上升。劳动力的国际贸易：开放他国来我国建厂等。
 限制国际贸易的手段：关税、进口配额
 大多数经济学家支持国际自由贸易，认为这是一种有效配置生产的方法，提高两国的生活水平。
 外部性：当一个人从事一种影响旁观者福利并对这种影响既不付报酬又不得报酬的活动，就产生了外部性。负外部性比如污染、噪音等社会成本，正外部性比如教育、街景美化
 外部性内在化：通过税收来抑制负外部性的增长，同时还可以将税收用于解决负外部性带来的影响，使得该负外部性影响由其制造者自身承担。对教育进行补贴也是如此
 针对污染的管控手段：矫正税或污染配额（污染权）
 美国燃油税：拥堵、车祸和污染的成本。
 世界上除了死亡和税收，没有什么事是确定无疑的。——本·富兰克林
 会计成本（会计利润、成本）与经济成本（经济利润、显性机会成本、隐性机会成本）
 规模经济：长期平均总成本随产量增加而减少。
 实物支付转移：穷人获得包括食品券、住房补贴和医疗服务，以非现金形式转移给穷人，进而调节经济分配</description>
    </item>
    
    <item>
      <title>FFmpeg&#43;AnotherGUI实现Windows上进行ProRes 422编码</title>
      <link>/post/preres_in_windows/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/preres_in_windows/</guid>
      <description> 方法来源 How to Export Apple Pro Res on a PC Using Windows
材料  FFmpeg（github地址）。官方提供了静态版（Static，无动态链接库）、共享库版（Shared）、构建版（Dev，一堆头文件）。此处下载Static或Shared版本
 AnotherGUI是一个编码器前端（高效并行处理），支持大量转码工作管理和调度。
 一个基于H.264编码的视频，格式MOV、MP4等皆可
  基本原理 把已经渲染好的基于H.264编码的视频，通过FFmpeg进行转码。AnotherGUI是一个图形界面操作者，协同管理和调度。
过程  FFmpeg解压，执行文件ffmpeg.exe在/bin中  AnotherGUI安装也是一把梭，画面简洁明了，常用英语  AnotherGUI有指定FFmpeg，会在Path下寻找（但官方没找到Setup for Windows，会找不到），可以直接在Executables里重定向： （注：第一次打开默认Path都是空白的，上图为过程演示）
 转码模式选择  添加源文件（可直接拖拽），并在右边的输出文件夹选择  Go  输出文件   直接用QQ影音（自我反省）打开听到一大堆撕裂声音，直接用QuickTime打开 结尾 貌似没有找到直接进行ProRes Encode in PC的方法…？（这就是FCP存在的理由吗？）
更多  DaVinci Resolve 穷人低配虚拟工作台
 pr素材代理 =&amp;gt; 大素材打包分发剪辑 &amp;amp;&amp;amp; 高计算量剪辑
  </description>
    </item>
    
    <item>
      <title>生日礼物之 直播非洲人bilibili福袋开箱</title>
      <link>/post/birthday/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/birthday/</guid>
      <description>前几天生日，挚友啥都没交代直接给我送了个哔哩哔哩的福袋…… 嗯在我不知情的情况下，快递小哥跟我说，太大了放不下，加上挚友说的看你运气，让我一度怀疑：是等身抱枕ヽ(#`Д´)ﾉ 当然收到的时候确实蛮意外的
官网上贴出了有可能抽到的东西： （捂脸）真是营销到了新高度啊 数学期望怎么算也不会比均价低全靠人品的开箱模式23333
当然表示最想要的…应该是33娘衣服 or 小电视U盘 or 33女仆抱枕 (=´ω｀=)
开箱 全程开箱视频
拍照
传说中的福袋 真的是个袋子： 可以当书包用嗯
鼠标垫！之前看中的！ 小电视棉毯（可现在是夏天耶 二二娘官方本子哈哈哈哈哈哈 还开出了一个神秘物品： 这才是最重要的！！三三娘抱枕 当然这个产品售后卡很讨巧，为了这个图案，有问题都不舍得找售后了 总结 (〃&amp;rsquo;▽&amp;rsquo;〃)真真的很嗨心，感谢我的好基友
最后也算了一下总价值，约272+一些迷之物品，合起来大概有310了（官方标配）。赌博心理其实感觉还是有点不舍的，要不…再买一个开一次？
（但是说回来你这样压榨消费者剩余真的好吗）</description>
    </item>
    
    <item>
      <title>Puppeteer初体验 &amp; 爬网课视频</title>
      <link>/post/pupeteer/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/pupeteer/</guid>
      <description>背景 手痒点了Coursera课程试听，忘了这回事直到PayPal提示我一笔60美元的支出（心如刀割）。想想认真听课要不把它录下来，以后可以看。一个一个抓太麻烦…索性写个爬虫把视频都爬下来好了…
分析 日常万能抓的Video Downloader professional抓不了 网页源码里却如此露骨，还是静态的 未注册访问Coursera是可以访问到（我所购买课程）的所有课程，视频所在网址如https://www.coursera.org/learn/daoyan-siwei-weiyingren/lecture/0W13U/fen-jing-tou-jiao-ben，中间有一个五位/[A-z0-9]/防爬的文本，禁止爬虫直接根据名字爬到视频页面。
通过Puppeteer模拟登陆，内部抓取所有视频的网址。再用Puppeteer自动打开网页抓取视频链接，再用下载工具批量下载重命名
（虽然后来发现模拟登陆后更麻烦…索性一个一个自己复制了…）
工具  Nodejs
 Puppeteer：无图形化运行chrome的API
  编码 npm install --save puppeteer
不少教程给了截图示例，代码内容也一目了然
async function getPic() { const browser = await require(&#39;puppeteer&#39;).launch(); const page = await browser.newPage(); await page.goto(&#39;https://google.com&#39;); await page.screenshot({path: &#39;./google.png&#39;}); await browser.close(); }  模拟点击 因为视频页面需要点击播放，视频区域才会被替换成视频链接，所以使用puppeteer本身浏览器模拟点击的API 通过css选择器找到点击的区域，调用page.click(&amp;quot;选择器的复制内容&amp;quot;)即可
最终 给定一系列键值对（排序编号为键，有视频的网页地址为值）
var page = await browser.newPage(); //打开新页面 await page.goto(addr[&amp;quot;value&amp;quot;],{ timeout: 50000}); //跳转网页，重订超时时间 await page.waitFor(5000); //等待网页打开 console.log(&amp;quot;in &amp;quot;+addr[&amp;quot;value&amp;quot;]); await page.click(&amp;quot;#rendered-content &amp;gt; div &amp;gt; div &amp;gt; section &amp;gt; div.</description>
    </item>
    
    <item>
      <title>Windows10工作站远程桌面连接：frp内网穿透映射RDP服务</title>
      <link>/post/rdpbyfrp/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/rdpbyfrp/</guid>
      <description>背景 问题  小作坊影视后期，素材量大，传输不方便。
 有一台核心工作站，协同工作者不集中，其各自设备不给力
 想办法让协同工作者能够远程参与到工作站中
  构思 开放工作站多用户协作，远程连接端口，允许其他网络协同工作者连接进来
优点：协同工作者彼此之间不需要复制多份大文件素材，不用过多考虑素材传输 问题、设备负载 问题。整理素材、粗剪、精剪等工作可以同时进行。
缺点：需要有流畅网速保障（公网服务器、自身分发速度、协同工作者的下载速度），剪辑预览的时候更需要有网速保障（通常本地工作站不需要考虑这些）。
所需工具  Windows10桌面开放连接：RDP Wrapper
 端口映射工具：frp
 本地工作站，能负载多用户登录
 一台中继服务器，国内外皆可，需要保证其上下行速度流畅（记得打开你阿里的port ban列表）
  配置 多用户登录 先创建新用户和密码，把用户放入Remote Desktop Users组 允许你的电脑接受远程连接 Windows登录某个用户就会挤下线另一个用户，首先允许你的工作站实现多用户同时登录：RDPWrap-&amp;gt;install.bat（记得关闭你的360、某安全管家）
后可使用RDPConf.exe配置具体内容 无法[fully supported]的可以尝试update.bat更新
使用RDPCheck.exe对本地多用户登录进行测试 多会话冲突 测试过程出现过多会话访问，工作站拒绝连接。原因是Windows系统防范过多会话连接。可在cmd-&amp;gt;gpedit.msc-&amp;gt;管理模板- Windows组件-&amp;gt;远程桌面服务-&amp;gt;远程桌面主机会话中，会话时间限制、连接等进行限制。
自定义最高连接数、设置断开连接后的会话生存时间等等。详细一些操作可自行搜索 配置服务器：frps 服务器上直接下载RDP Wrapper对应版本，修改frps.ini。可以简单按照RDP文档的示例配置一个监听接口，安全一点可以引入stcp等。
./frps -c ./frps.ini启动
至于需要配置systemd service和crontab的请自行配置
配置工作站：frpc 下载RDP Wrapper对应版本修改frpc.ini。
简单配置做测试
[common] server_addr = 你服务器地址 server_port = 7000 服务器的穿透端口（frps.ini中指定的端口） [RDP] type = tcp local_ip = 0.</description>
    </item>
    
    <item>
      <title>c&#43;&#43;结合V8模块扩展nodejs功能，用c&#43;&#43;处理复杂计算</title>
      <link>/post/nodejscpp/</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/nodejscpp/</guid>
      <description>我团队在年底举办的青年实践活动“粿奔计划”中，线下游戏RPG采用Nodejs+cpp+html完成业务逻辑。
因为V8引擎由c++完成，可以在cpp中直接引入&amp;lt;v8.h&amp;gt;，通过node-gyp与building.gyp结构文件渲染成一个node模块。cpp作为游戏引擎部分，保留可以被调用的js模块接口，在nodejs中引入模块并按平常调用。
书写cc（cpp）文件 新建一个文件，这里用的是test.cc
#include &amp;lt;node.h&amp;gt; #include &amp;lt;v8.h&amp;gt; #include &amp;lt;string&amp;gt; using namespace v8; using namespace std; void hello(const FunctionCallbackInfo&amp;lt;Value&amp;gt;&amp;amp; args) { Isolate* isolate = Isolate::GetCurrent(); //统一开头 获取js脚本上下文 int value = args[0]-&amp;gt;NumberValue() + args[1]-&amp;gt;NumberValue(); //将第一二个参数的数值相加 Local&amp;lt;Number&amp;gt; num = Number::New(isolate, value); //将相加的value转化为可返回的数据类型 String::Utf8Value param1(args[0]-&amp;gt;ToString()); String::Utf8Value param2(args[1]-&amp;gt;ToString()); //新建String对象，由参数强制转换为String而填充 string ret=string(*param1).string::append(string(*param2)); //以上完成简单的字符转换和衔接 Handle&amp;lt;Value&amp;gt; str = String::NewFromUtf8(isolate, ret.c_str() ); //通过ret.c_str()转化对象后构建新Handle（handle 是指向对象的指针 Local&amp;lt;String&amp;gt; str2= String::NewFromUtf8(isolate,&amp;quot;sss&amp;quot;); //创建一个可以用于返回的String类型，内容为“sss” args.GetReturnValue().Set(str); //获取传入参数的返回参数，设置str为返回参数 //如果传入的参数携带回调函数，则支持： // callback, 使用Cast方法来转换 Local&amp;lt;Function&amp;gt; callback = Local&amp;lt;Function&amp;gt;::Cast(args[1]); Local&amp;lt;Value&amp;gt; argv[1] = { // 拼接String String::Concat(Local&amp;lt;String&amp;gt;::Cast(args[0]), String::NewFromUtf8(isolate, &amp;quot; world&amp;quot;)) }; // 调用回调, 参数: 当前上下文，参数个数，参数列表 callback-&amp;gt;Call(isolate-&amp;gt;GetCurrentContext()-&amp;gt;Global(), 1, argv); } void helloA(const FunctionCallbackInfo&amp;lt;Value&amp;gt;&amp;amp; args) { //.</description>
    </item>
    
    <item>
      <title>GameJam广州站摸鱼组一日游*2 游记</title>
      <link>/post/%E6%B8%B8%E8%AE%B0/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%B8%B8%E8%AE%B0/</guid>
      <description>两天就能做出一个游戏来？没有奖金、没有奖品，为什么每年近万人参加这个活动？
 GameJam 全称 Global Game Jam（GGJ），前身为Inside Game Jam，原本只是一个测试游戏引擎的小聚会，慢慢聚集了越来越多的独立游戏开发爱好者，国外较为流行，独立游戏界响当当的年会级别金字招牌。如今的GGJ，已经演变成一个“和一群陌生人48小时快速开发游戏demo”的独立游戏制作者交流会，围绕一个keyword展开，吸引全球各个国家地区举办，每年近万人参加，近千款独立游戏于此诞生。
今年广州站在海珠区凤凰新村的石榴仓，1月26日～1月28日
今年关键词：Transmission
有关gamejam其他的详细报道
展览大厅 笔者作为摸鱼组来到现场观摩各位大佬，进门两侧到处都是中手游的独立游戏立牌（承办方）。往里边走是许许多多也许是大家童年记忆的地方：墙上贴满了海报，是游戏发展以来近50年的历史，有游戏的、主机的、游戏实况截图等等，一直延展到拐角处
雅达利的当年
大厅的中央摆了一张桌子，上面摆满了书，有杂志、游戏美术原本、游戏档案（比如尼尔小姐姐）、游戏设计书啊啥的（如果是个图书馆我想蹲一天）
中间的小展台有一台ps4，搞得我心里痒痒的（怎么办，作为一个任豚我的内心动摇了）
后面的一个莫名其妙的站台还摆了一台莫名其妙的游戏机？旁边还有一个VR游戏眼镜
左边有一排接近10米的展览柜，上面基本是大家童年的回忆，有老到大规模集成电路还没普及的游戏机大主板、到插卡的playstation、雅达利、GBA、红白机、任天堂NS及其各种定制版。
作为一个小时候没有游戏机生活的计算机儿童表示真羡慕你们有游戏机的童年。里面还有一些是全球限量版或绝版的玩意
最前面的中央的地带当然是等会主持人要吹水的地方啦，估摸着有一百多人。开启过程主持人还翻了好几次车（雾
由于此次性质是极限创作，所以在发布keyword的时候，主办方希望大家保密，活动结束后再发布。 此次的主题是：Transmission
接下来就到了全场举板的环节：这是每年gamejam的经典场面，一个人拿着电脑或平板，上面书写“求程序员”或“求美术”，举着板子在场地里四处游走寻求人才。
还有某组的混合式缺人
当然楼上 好像是 有一组早就搬了一台大机箱过来的，前面小姐姐的外星人很是耀眼
48小时后的光芒 两天是有很多人熬夜甚至通宵的，门口还有主办方代买的泡面堆饮水机，大家拖家带口台式机显示器成堆
还有很多小哥哥还在现场修改代码
48小时之后大家又回坐到大堂，各个组别开始展示自己的游戏demo
听说抖腿是会传染的？打击感的节奏控制游戏，随着音乐人物抖腿，传递 到车厢里的每一个人
还有把 transmission 解释成 汽车换挡 和 虚拟传输到现实 的，玩家控制一只虚拟小车，尝试翻越过危险地形，然后动作会传输到遥远星球的一辆真实小车（当然是游戏里的啦），小车还不一定能过关的。图为翻车现场
一位没有到场的独立游戏开发者发送视频展示了自己的游戏demo，借用了“沉默的螺旋”这一社会现象，你需要扮演一个传递红色思想的主角，把思想传递 给别人，但电视广播、还有各种各样的阻挠会出现。
内容非常简单甚至是无聊，但制作者对游戏的解释让我不寒而栗
 我们不奢望改变世界，只希望不要被世界所改变
 作者最后引用了这句话来诠释这个游戏
大概优秀的独立游戏制作人，也是个孤独的文学家吧（@小岛秀夫）
其实现场还有其他更多游戏的游戏，碍于自己行程，没有全部跟进～抱歉啦
总结 其实整场活动给人的感觉特别像开源社区各处每年的年会，没有了面向业务面向市场的束缚，非常存粹地在讨论游戏，传递欢乐，维护着被视为神圣但不堪一击的 独立游戏情怀。他们是一群渺小的人，是一群伟大的人。</description>
    </item>
    
    <item>
      <title>Java Rebase</title>
      <link>/post/java-rebase/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/java-rebase/</guid>
      <description>写在前面 Java囧境 作为面向对象炒得最火的语言，Java曾依靠虚拟机的跨平台特性撑起计算机半臂江山。
时至今日，Java已经略显疲惫，有些高不成低不就的感觉。
 试图培养成一种面向通用的语言，在py、R、Go等面向专业语言诞生之后，java的通用优势不足。  在安卓领域，第二代第三代JVM语言横空出世，Kotlin快速夺取市场。 在服务器领域，因为历史遗留问题JavaSRE目前依然为主流，但不是长久之计。新的服务器架构快速迭代，后起之秀Py、nodejs也在快速增长。 桌面领域Java一直有力使不出来，底部依赖大、自家GUI又刚不过qt系列 语言语法及其体系相对冗长、功能迭代速度相对较慢，底层相对重量级  甲骨文的收购、商业化与闭源一定程度上延迟了技术层面的增长 曾经的跨平台特性已经不再是其核心竞争力 Java的体系相当庞大，光是服务器框架就可以学完大学四年  （其实感觉有点像Apache与Nginx port80之争那份漫画，老一辈与晚辈各自的优势）
所提的点不是贬低Java，是较理性地描述目前的问题
个人发展瓶颈 本身自己是学习Java内容居多的，从高中一本《从如坑到弃疗》，到大学起来接触各种教新的技术。
大学生迷茫直观上来说，无非分为两种
 了解得太少 了解得太多  中学的时候不知道java是什么，一直摇摆不定学不学计算机，特迷茫。报考了志愿进了计算机这一大坑，诶，目标算是定下来了，不会太迷茫，java就继续学下去。直到接触了更多更先进的技术，再次陷入迷茫。
断舍离提供了一些方法论来解决问题，做出了决定：放弃java，转向其他语言
上升到另一个层面，变成语言无非只是解决问题的方法而以，所以这个决定并不是什么大事。我现在要做的是把大学这一两年来断断续续学到的Java的内容进行归纳总结，毕竟编程设计语言是具有共性的，在Java学到的解决问题的思路，完全可以应用到其他语言、学科和领域。所以在此开了这篇文章。
所以标题引用了git中一个专业名词Rebase，更直观的感受是更换基底的意思。
文所涉及的内容，是个人从Java中学习而来的，并不是Java独有的，请勿混淆
Java总览 语言特性
 面向对象（封装继承多态，不允许多重继承） 跨平台(once code, run debug everywhere) 底层解释型（虚拟机机器码） 安全检查（你可能需要Rust） 强类型、静态语言 内存垃圾gc 大小写严格、默认驼峰命名法  技术与名词 JVM(Java Virtual Machine) Java实体运行软件，通过编程Java代码，编译成class机器码，由JVM适配平台，执行机器码内容（以此实现跨平台）。当然，JVM不一定由Java编写，使用Ruby语言+JRuby编译器等照样可以调用JVM。具体的计算机程序编译过程请自行了解。
JRE(Java Runtime Environment)Java运行环境，包含一个JVM和一系列标准类库
JDK(Java Development Kit) 程序开发库，包含了接口等一系列开发必备软件，通过Java语法导入、调用
JDK的实体文件结构
   目录 描述     \bin 编译器、测试与调用等工具   \demo 代码示例   \docs html的类库文档   \include 用于编译本地库、本地方法的文件   \jre 运行环境所需的文件   \lib 类库文件   \src 类库源文件    SE、ME、EE Java的三个不同版本，分别对应小型设备、桌面与简单服务器、企业及服务器三种平台</description>
    </item>
    
    <item>
      <title>跳出OO思想与OODP-杂记</title>
      <link>/post/disoodp/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/disoodp/</guid>
      <description> 跳出面向对象思想 整理了一遍自己的笔记，里面有不少关于面向对象设计的内容，整理完放到了Gitbook，里面包括了OO原则、二十三设计模式、跳出面向对象思想三个部分。其中相对来说较为具有启发性的是第三部分的跳出面向对象思想，引用了来自大佬Casa Taloyum博客的三篇跳出面向对象思想。
更具体的关于面向对象思维的局限性可以见 面向对象编程的弊端是什么？ - invalid s的回答 - 知乎。
其最核心的问题在于，在所有的编程设计都是辅助完成业务的前提下，不同的手段（面向过程、面向对象、面向函数等）能否尽力交付任务。也不能否认面向对象思维给计算机带来的飞跃，在此基础上会有更先进的思维，这是大家愿意看到的。
关于设计模式 知乎的回答里业界大佬也以相对实际使用的角度提到了设计模式：“一切皆对象实质上是在鼓励堆砌毫无意义的喋喋不休，并且用这种战术层面都蠢的要命的喋喋不休来代替战略层面的考量。大部分人——注意，不是个别人——甚至被这种无意义的喋喋不休搞出了神经质，以至于非要在喋喋不休中找出意义：没错，我说的就是设计模式驱动编程，以及如此理解面向对象编程。”
承认其所提到的，“大家使用过度，反而忘记了设计的初衷”这一部分内容
作者原用于纠正“所以用面向对象语言写出来的东西一定更清晰、易懂”的误解（虽然我也比较同意），单独来说更偏向狭义上的设计模式；设计模式并非只存在于面向对象设计之中，广义上是为所有的程序设计提供了解决方案的思路。
设计模式是一种抽象“抽象”的技术（或是艺术），GoF设计模式一书具有划时代意义也在于它完成了对抽象逻辑的一次抽象，也给软件工程提供了一个不同角度的世界观和方法论。引用书中一段较为中肯的话
 本书中涉及的设计模式并不描述新的或未经证实的设计，我们只收录那些在不同系统中多次使用过的成功设计。这些设计的绝大部分以往并无文本记录，它们或是来源于面向对象设计者圈子里的非正式交流，或是来源于某些成功的面向对象系统的某些部分，但对设计新手来说，这些东西是很难学得到的。尽管这些设计不包括新的思路，但我们用一种新的、便于理解的方式将其展现给读者，即：具有统一格式的、已分类编目的若干组设计模式。
 而我们可能更需要注意的是避免一些问题，如
 只了解模式、不了解原因、场景 过度设计、使用，忘记初衷问题  设计模式应当解决实际的问题，理论辅佐完成实践 设计模式应当变成一种行业内交流的货币，用于沟通交流
相关链接
 面向对象程序设计 - wiki 知乎 - 面向对象编程的弊端是什么？ 知乎 - 设计模式有何不妥，所谓的荼毒体现在哪？ 知乎 - 如何正确地使用设计模式？ Arch Linux 哲学  </description>
    </item>
    
    <item>
      <title>修复ae中英版本差异导致js表达式错误</title>
      <link>/post/aeexpfix/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/aeexpfix/</guid>
      <description> 背景 下载一些模板打开之后发现预览窗口下警告“表达式错误”，导致效果无法显示
原因：通常是因为原来的模板，在使用系统组件的表达式中引用了英文，在中文的ae中打开后，系统组件无法被正确引用。
解决思路 手动修bug法：在图层表达式中修复引用 把英文名引用换用中文名，量小的时候建议修复，量多的话参考第二个解决思路
中英的关系如下：
 滑块 = Slider
 角度 = Angle
 复选框 = Checkbox
 颜色 = Color
 点 = Point
 图层 = Layer
 3D 点 = 3DPoint
  通过提示直接查找每一个错误的引用，将引用（在图层里，通常是红色代表出错）的表达式里的英文，转成对应的中文
发现错误，找到表达式如下：
打开“Your Text”图层，效果如下
将“Fast Blur”改为“快速模糊（旧版）” 提示仍有错误，根据提示将“Blurriness”改为“模糊度”，成功改正错误
一劳永逸法：修改底层中英引用 软件里的系统组件的语言文本，将中文引用改为英文引用，其他不变，使其适配英文表达式。出现大量错误时候推荐，一劳永逸
在Support Files-zdictionaries（win）或Contents/Dictionaries/zh_CN（mac）文件夹（语言文件相关）下，找到after_effects_zh-Hans.dat
改动常见的语言错误如下图。（中英对应解决方案1中的中英映射）
之后 reload AE 即可
总结 你看这个ae英文版它又大又圆，真香。
参考资料  贴吧吧友解决方案
 表达式修复工具
 详细修复及原理博客
  </description>
    </item>
    
    <item>
      <title>TinyPNG初体验</title>
      <link>/post/tinypng/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tinypng/</guid>
      <description>背景 学习“数字图像处理”了解到使用TinyPNG对图片进行压缩，压缩比率能到50%以上
TinyPNG TinyPNG只是众多png压缩算法中的一种，相对优秀的还有pngquant/pngout 通过取出元数据、将RGB24位色压缩到索引8位色实现尽可能大的色彩保留 产品本身提供在线API、在线使用、以及TinyPNG可以作为PS插件整合等，相对灵活 测试 产品定位本身用于压缩较小的PNG图像（原理上建立索引颜色，通常不会用于处理复杂色彩图像）
用于图标等简单图案，TinyPNG压缩可以在肉眼较难感知情况下尽可能压缩 对于摄影作品的压缩就遇见比较大的问题 第一幅图的压缩率接近39%，第二幅图接近61% 跟画面内容跟画面信息都有关系（仅为单次测试，平均表现详见上面表格）
根据索引的原理压缩黑白图像可以尽可能多保存信息内容 摄影作品转换黑白后，用其压缩能得到不错的还原及大小压缩效果（38%） 简单结论 TinyPNG适合：
 图标、头像等压缩，降低软件安装包大小、加快网页交付
 摄影作品黑白图像的高质量、小空间存储（有损压缩）
 不适合色彩复杂的摄影作品存储
  扩展 python自动化批量处理TinyPNG脚本
官网提供在线压缩尝试
QQ音乐技术团队对PNG图片压缩的分析
附件：TinyPNG插件 for PS</description>
    </item>
    
    <item>
      <title>修正 达芬奇xml剪辑表 素材出入点错误</title>
      <link>/post/dvc-xml-fix/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/dvc-xml-fix/</guid>
      <description>背景 因为一些原因 需要将一段素材进行场景变换侦测（根据镜头切换，切割视频），然后转换成剪辑表跟素材，进行下一步的操作。在输出剪辑表的时候，发生了“剪切时间点正确，但素材出入点错误”的尴尬局面。
场景侦测 达芬奇提供场景侦测自动分切的功能：
图片一目了然，根据画面变化率进行分辨对视频进行逆向分析（所以一些渐变效果需要自己手动调整右边的时间切段）
下面的紫色的线条可以上下拖动调整变化率敏感度
将分切好的素材全选生成一个对应序列，在剪辑板块直接导出XML文件（因为需要跟pr接驳，直接用了标准XML）
问题 通常来说输出的剪辑表应该是这样的：
AB,C,DEF,GH,I
结果在PR中读取是这样的：
AB,A,ABC,AB,A
即：剪辑点是对的，但素材的起始点不对，全部回到素材的起始点了
分析  直接一个一个改治标不治本
 直接用达芬奇渲染分段素材，又担心二次渲染对素材造成影响，以及无缘无故浪费机器性能
 直接拆剪辑表，把素材的出入点进行修改
  实操 剪辑表的格式是普通的xml格式，用一些在线阅读器可以更明朗地观看：
而其中出现问题的就在每一个素材剪辑段的标签内：
要做的就是筛选出指定标签里的剪辑点同步到素材出入点上
nodejs代码：
var fs = require(&amp;quot;fs&amp;quot;); var xml2js = require(&#39;xml2js&#39;); var parser = new xml2js.Parser();//用于解析xml为json对象 var builder = new xml2js.Builder(); fs.readFile(process.argv.slice(2)[0], &amp;quot;utf-8&amp;quot;, function(err,data){ if (err) {console.log(&amp;quot;读取文件失败&amp;quot;); throw err;} parser.parseString(data, function(err,res){ if(err) throw err; var medialist=res.xmeml.sequence[0].media[0]//获取media列表 var vlist=medialist.video[0].track[0].clipitem var alist=medialist.audio[0].track[0].clipitem for(clip of vlist){ clip.in[0]=clip.start[0] clip.</description>
    </item>
    
    <item>
      <title>MAC系统手动挂载读写NTFS文件系统</title>
      <link>/post/mac-ntfs/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/mac-ntfs/</guid>
      <description>背景 由于一些历史原因，Mac操作系统上插入NTFS（微软开发）的磁盘时，只能读取而不能写入。
无法新建文件夹、删除等操作
Paragon等磁盘工具的收费版有提供写入的功能。而实际操作系统并没有这个限制，可以手动开启。
代码 # 获取传参磁盘的设备文件 devs=`mount|grep $1|awk &#39;{print $1}&#39;` echo &amp;quot;selected hard disk&amp;quot;+${devs} # 指定在卷的挂载点 newdevs=&amp;quot;/Volumes/可写磁盘&amp;quot; echo &amp;quot;new mount point&amp;quot;+${newdevs} # 卸载现有磁盘的挂载点，创建新挂载点 sudo umount /Volumes/$1 sudo mkdir $newdevs # 挂载设备到新挂载点，指明读写权限 sudo mount -t ntfs -o rw,auto,nobrowse $devs $newdevs # 链接到桌面 sudo ln -s $newdevs ~/Desktop/WriteableNTFSDisk  在桌面就出现重新挂载过的硬盘啦 可以读写</description>
    </item>
    
    <item>
      <title>flv/mkv文件提取pr可导入格式</title>
      <link>/post/flvnmkv2mp4/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/flvnmkv2mp4/</guid>
      <description>背景 屡次被问flv跟mkv格式为什么不能导入pr，以及如何解决。
FLV 早期视频导入flash后导出swf体积庞大，flv（Flash Video）格式早期产生用于解决这个问题。flv是flash文件作为外壳保护（封装）视频，并转换成串流格式。
同时：
 外壳可以保护原视频内容、版权等
 串流媒体传输支持在网络上进行点播（视频点播网站常用，现在逐渐被H5取代）
 视频多用h.264编码，音频多用acc或mp3，但是有一层外壳，可以直接提取
 pr并不是没办法导入flv，只要有相应编解码器就可以导入（早期pr能解H.263，可以导入早期flv视频）pr用的编解码器体系参见AME，导入不了大多是flv的封装格式AME非能解
  解决办法：
 直接对flv文件进行去外壳+重新封装（小丸工具箱-封装，flv进去mp4出来最暴力）
 抽出视频（含外壳）+抽出音频，再手动封装
  （支持批量）
MKV mkv（Matroska格式的一种）提供容器格式，用于存放多条视频、多条音频、多份字幕等，同时也支持串流媒体传输，支持选单（像DVD一样）
不能拉入pr的原因是包含多个黏在一起的视频、音频、字幕等，而无法作为一个单独的素材导入，故需要提取
小丸工具箱自带抽取工具（以及第三方抽取工具） 同时在封装版面也提供了mkv封装
硕鼠flv下载器 硕鼠也提供了bilibili专门的下载器（能突破限速，这个还是蛮实用的）
同时可以安装上“硕鼠转换”，可以直接转换flv到mp4（暂无mov？），不过没有参数可调，而且压缩得很惨
(最后89M被压剩14M)
另外在bilibili大视频会分片，以及番剧没办法在“kanbilibli”直接找到（可以去kanbilibili上搜索，依然可以找到），硕鼠可以直接根据番剧地址下载
同时提供了“硕鼠合并”，可以直接只能拼合（不会删除原分片）</description>
    </item>
    
    <item>
      <title>《崩坏3》浅层分析</title>
      <link>/post/bbb3/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/bbb3/</guid>
      <description>全文9000字（更新中），约18分钟。
前70%为较为表层分析主要内容
较为重点为较后部分的 非理性细节引导的分析
 架构  陈述性系统结构
 主要游戏资源
 推进单元与关卡设计
 游戏副本
  改进性系统结构
 角色获得
 角色养成
 武器与圣痕
 宿舍与基地
 舰团系统
  核心循环
 战斗节奏  运营系统
 玩家回归手段
 引导消费
 奖励模式
   游戏经济系统  时间入口
 P&amp;amp;E资源流向
 P&amp;amp;P交易手段
 数值平衡
  总体体验  题材
 世界观
 浸入式程度
 音乐与视觉
  其他  战略推测</description>
    </item>
    
    <item>
      <title>DaVinci/Fusion 节点式效果软件初体验:Tracker跟踪效果</title>
      <link>/post/davinci-track/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/davinci-track/</guid>
      <description>背景 （Adobe用户习惯剥离计划进行中）
因为最新的Davinci15把BlackMagic自家的Fusion内置了，现在基本集素材整理、剪辑、特效、调色、调音和渲染于一身，效果在达芬奇里面做也是方便点的。借这个机会尝试一下节点式效果工具
达芬奇15中的Fusion页面
素材与需求 （其实是过段时间bdf制作希望高点逼格）素材是多人出入场的舞蹈，将人物的名字附加到舞蹈者的运动趋势上
于是随机找了一段电脑里带有运动趋势的素材和一个白条做尝试
视频素材
图片素材 结果视频： BDF2018宣传片 after 1:20
操作 导入两部分素材，在时间线上部署底层素材 直接切换到fusion工作台 节点式主要是以清晰明朗的效果器结构与关系来展示复杂的效果逻辑，这一点比ae在层级控制上有更多的灵活性 图中为节点面板，左边是媒体素材，右边是媒体的输出，要做的就是在这两个节点之间添加效果器
为输入素材添加跟踪器，并添加节点进行跟踪，跟踪……素材里的女孩的蝴蝶结 下面是添加中间节点的效果器 中间是跟踪结果 右上角向右跟踪
添加人名条并将其运动轨迹指定为跟踪器的分析结果 左下角将新素材连接到跟踪器 右边切换到跟踪模式，切换到匹配移动(match move)模式，则结果会出现人名条已经被附加到跟踪器的轨迹上
修改人名条的相对位置匹配到指定点上 简单的节点效果制作就完成了，切换回剪辑模式即可继续剪辑。因为效果是基于素材的，在剪辑里没有额外增加新的素材，整个工程更加简洁明了（pr和ae你们自己反思反思） 结尾  视频效果
 提供了更灵活的调节工具（当然需要你的硬件）
 提供了更清晰明朗的工程结构
 最最重要的是，它可以在交付里重新生成片段xml，自定义帧余量渲染套底，整个回批的素材包只包括必须素材的必须片段，会小很多很多！
  前排抱走诸君的老婆</description>
    </item>
    
    <item>
      <title>DaVinci Resolve 穷人低配虚拟工作台</title>
      <link>/post/davinciresolve/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/davinciresolve/</guid>
      <description>世界级调色软件Blackmagic公司出品的Davinci，做后期调色的时候通常有软硬件套装，软件是DaVinci Resolve[ Studio]，硬件部分如下图：
（大概几十万吧）
当然，硬件调色台不是必须的，（由于穷（其实是装逼））细节辅助调节等小需求基于折腾地去尝试了一下
实现效果视频
 iPad上安装element-Vs，打开后需要和主机进行连接（主从式WiFi首选，pc上开wifi）
 pc上键映射工具：Tangent 官网，记得Application Support选其中达芬奇的版本（其实就是一些初始化配置而已，可手动）
 在达芬奇里打开控制台（偏好设置-&amp;gt;调色台-&amp;gt;Tangent Devices Element）
  请尽情使用装逼 Tangent还支持adobe的pr/sg等其他一系列（疑似）后期制作工具的键映射</description>
    </item>
    
    <item>
      <title>pr素材代理 =&gt; 大素材打包分发剪辑 &amp;&amp; 高计算量剪辑</title>
      <link>/post/video-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/video-proxy/</guid>
      <description>后期剪辑可能会遇到以下问题
 素材量巨大或有高解析如4K素材，电脑太烂带不动 需要把视频交付给别人去剪辑，素材很多很大，上传网速太慢  使用pr自带的自动代理功能可以有效解决
基本思路是，把巨大的素材转换成一个小的，可以完成基础剪辑、音频校验等工作的视频素材，以降低CPU在解析素材的时间和硬盘使用率，从而提高处理速度。缺点在于对画面细节丢失精度，比如在稳定器的计算等等。
当需要别人参与剪辑的时候，只需要将代理文件打包好，交付给对方即可。
笔者使用pr版本提供两种代理手段：
 手动 创建代理或链接已有代理  收录时 自动 创建代理（下文介绍）
  代理素材实现高计算量剪辑 首先自然要把素材归类到一个文件夹中，并在旁边新建一个pr工程
在收录设置中，选择创建代理。当然目录建议是放在同一个文件夹，我新建了一个“素材代理”
其中的预设建议使用GoPro的方案，体积相对H.264较大，该编码专门针对视频中间代理文件，较大程度保留精度。若没有 稳定、变速光流法 等需要高精度计算的精剪效果的话，建议使用H.264，或者您可以导入其他预设。
通常到这里应该有三个项目了，这个时候可以将素材文件夹的素材导入pr中，pr收录会自动启动AME(Adobe Media Encoder)，并进行转码和代理连接
如果收录设置有修改见下图
到这里基本完成了素材的代理生成，现在要让我们的pr工程启用代理
在素材查看器(源)和节目预览(节目)中把切换代理按钮拉下来，分别启动素材代理。可以看到素材被替换为一个左右两边有两条小黑边的代理素材，则为启动了素材代理。
代理素材+工程打包分发 导入+渲染完所有代理素材后，想要把代理素材全部打包交付给(比如手下或外包团队)去做的话
首先解除原素材和代理素材之间的关系
选中所有原素材，设为脱机（我是直接归类成一个文件夹）
如图描述，如果是工作分发，自己按理要保留文件，第二项会删除源文件，看自己需要做选择
这时候就可以准备打包了，如图↑选择项目管理（打开之前请先创建一条空序列，打包需求）
随便创建了一个空序列，打包是按序列来打的
右边记得勾选打包未使用素材，否则是空包。新建工程没有预览文件，路径自定义，下面的估计磁盘空间请按素材代理的总大小来计算（“素材代理”文件夹大小），请确保磁盘上有足够空间进行打包
可以看到打包之后就只有代理素材和工程文件了，打开照样可以进行剪辑工作
回链接素材+渲染  代理的素材会在渲染时候默认替换回原来的素材，可以直接渲染
 分发返回的剪辑工作，需要重新连接原素材，再读第一点。
  修订补充 据随机测试，Gopro预设把文件压缩到大约六分之一到三分之一，H.264大约压缩到十二分之一
因为素材多种且码率参数各有不同，数据仅做概率参考
（抠鼻）反正可以手动创建预设</description>
    </item>
    
    <item>
      <title>后期字幕制作踩过的坑和比较推荐的做法</title>
      <link>/post/%E5%AD%97%E5%B9%95/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E5%B9%95/</guid>
      <description>简单列一下之前自己在制作视频字幕踩过的坑：
 不要使用旧版本AdobePR制作字幕（在PR中，早期的“字幕”和“标题”还是同一个东西的版本）
 尽量避免使用过于生僻的字，如果使用图像作为字幕，可以使用拼接。
  比较推荐的一些做法：
 aegisub制作ass字幕+小丸压制
 使用PS批量导出PSD作为字幕素材（个人比较常用）
  还未尝试的一些做法：
 PR字幕+调整图层
 Arc-Time在线字幕制作
  aegisub制作ass字幕+小丸压制 思路：创建一个包含样式、时间点和台词的字幕文件，只需要粗剪辑即可分工制作，适合台词量大的视频。
 制作：非常方便
 修改：方便
 上手：较难（需要简单看得懂开发文档为优）
  此处摘抄炮姐第一季第一集ass字幕文件（脚本文件）：(其中分号为官方脚本备注，井号为我自己添加的解释备注)
[Script Info] ##这一块指明了这个脚本的详细信息，直接英译中即可 ; Script generated by Aegisub 3.0.2 ; http://www.aegisub.org/ ; // 此字幕由PopSub生成 2014-03-15 17:24:20 ; // 版本: 0.77 ; // popgo_fansub@yahoo.co.jp ; // 欢迎访问漫游天下 http://bbs.popgo.net Title:漫游字幕 Original Script:漫游字幕组 Synch Point:0 ##指明时间偏移量 ScriptType:v4.00+ ##指明脚本版本，通常是4.00+ Collisions:Normal PlayResX:1280 ##指明字幕的渲染的位置 PlayResY:720 Timer:100.</description>
    </item>
    
    <item>
      <title>最基础的个人文件管理（</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description>今天又被某计算机道友提到，顺道一把抄过来。
老问题如：
 当年买了1T磁盘，现在文件太多，系统太卡怎么办 文件太多乱七八糟的，重装系统太麻烦了还得重新整理 用了太久磁盘太慢游戏/PR要开半天怎么办  解决问题的方法：从一开始就做好文件管理（甩锅）
个人文件的管理  从文件访问频度划分，如系统运行的数据和常年不用的冷数据之间的区分，凭个人喜好划分。我是划分成系统盘+热数据盘+冷数据盘（备份区、收藏区、归档区） 从所有权划分，系统的归属系统，用户的归属用户。Windows比如你别把个人文件复制到Program Files里区，类Unix比如/usr/bin/与/bin的划分（当然首先你得直到每个文件夹是做啥用的） 为存储划分功能，如1中提到的备份、收藏、归档。规划一个逃生舱，这部分的数据是需要重点维护的，整个盘坏掉了这部分可以逃生的。 定期整理、归档、清理文件。我是按日期做归档。 备份：使用云备份工具、简单的复制/冗余备份 该用工具的地方就用不要嫌麻烦  工具：Git等版本管理工具、Everything等全盘搜索工具、坚果云等同步工具
折腾的管理  磁盘冗余阵列RAID牺牲空间保证安全 你可能需要数据库来帮你管理文件 NAS系统（出门右转群晖 手写人工智能算法，分析个人文件特征自动做归类管理（Nice  具体场景的文件管理  程序项目开发，工程文件相对较小（没到G级别）优先使用版本管理器 影视制作，素材库文件大，优先使用素材管理器（Bridge或数据库） 多人共同编辑推荐在线合作编辑软件如石墨文档  使用注意 反正磁盘都是有寿命的，减少擦写/减少磁盘随机访问都算是一种保护了
在下载/保存文件的时候做好分类，临时使用的用完记得归档或删除
个人文件不要过度依赖系统（建议定期刷系统
尝试性修改，使用副本进行
etc.
回答一开始的几个问题
A1: 当年买了1T磁盘，现在文件太多，系统太卡怎么办。
Q1: 整理，换SSD，重装系统
A2: 文件太多乱七八糟的，重装系统太麻烦了还得重新整理
Q2: 整理，换SSD，重装系统
A3: 用了太久磁盘太慢游戏/PR要开半天怎么办
Q3: 整理，换SSD，重装系统</description>
    </item>
    
    <item>
      <title>阿里云订制个人团队邮箱</title>
      <link>/post/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/</guid>
      <description>域名到邮箱 阿里云提供了自定义域名的个人团队邮箱（看起来是专门针对小团队的），可以用域名专门订制比如@visn.me,@dalao.dat等小团队邮箱，上限50个，每个人有5G独立空间，和2G团队共享空间
首先你当然需要自己的域名，可以选择去狗爹或阿里云里自带的万网买，二手转入或其他途径获得一个域名
买完或转手完域名记得去实名认证。域名在国内实名认证还算比较快的，几个工作日就能完成。
阿里云控制台里有如图企业邮箱模块。由于都是免费的而且过程较为粗暴，相信习惯了一把梭的你都会的（其实是创建的时候没截图）
确认解析可达 申请成功后，会有一个官方管理员账号，需要登陆并修改密码。登陆网址是阿里云企业邮箱官网，默认用户名是postmaster@*.*。
按照官方手册的指引说是进了管理员账号然后进入域管理，找了半天没这三个字。这家伙在右上角的扳手🔧图案这。
刚创建的邮箱域名，需要同步域名服务器会有延迟，在域管理里面的邮箱业务-&amp;gt;邮箱运维-&amp;gt;检查MX解析设置解析，等待直到解析成功。期间可以返回阿里云控制台的DNS解析记录（会有好几条解析到mxhichina.com），看看有没有解析成功。
管理员工 进入域管理剩下的操作就很简单了，添加部门、添加员工什么的
新建账户也很简单，要求用户名、邮箱名和初始密码。员工登陆的时候会要求重制密码。
每个新员工打开的时候会收到一封欢迎信，可订制的在域管理中的企业定制
创建合作群组 在邮箱界面可以创建一个邮件组，邮件组的成员有一个单独的邮箱地址（如jishu@*.*，表示发给技术部门所有人），发送到这个地址的邮件会分别提醒群组里的每个人。
不过主要是能有共享的网盘空间（为什么不用百度云
其他操作都是比较简单的小白操作了（跑
补充 添加到邮箱大师/QQ邮箱那些也是一把梭，中间会要求你确认收发代理，会自动填好，确认即可</description>
    </item>
    
  </channel>
</rss>