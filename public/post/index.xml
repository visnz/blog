<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on * IN SHADOW</title>
    <link>/post/</link>
    <description>Recent content in Posts on * IN SHADOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pr素材代理 =&gt; 大素材打包分发剪辑 &amp;&amp; 高计算量剪辑</title>
      <link>/post/video-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/video-proxy/</guid>
      <description>后期剪辑可能会遇到以下问题
 素材量巨大或有高解析如4K素材，电脑太烂带不动 需要把视频交付给别人去剪辑，素材很多很大，上传网速太慢  使用pr自带的自动代理功能可以有效解决
基本思路是，把巨大的素材转换成一个小的，可以完成基础剪辑、音频校验等工作的视频素材，以降低CPU在解析素材的时间和硬盘使用率，从而提高处理速度。缺点在于对画面细节丢失精度，比如在稳定器的计算等等。
当需要别人参与剪辑的时候，只需要将代理文件打包好，交付给对方即可。
笔者使用pr版本提供两种代理手段：
 手动 创建代理或链接已有代理  收录时 自动 创建代理（下文介绍）
  代理素材实现高计算量剪辑 首先自然要把素材归类到一个文件夹中，并在旁边新建一个pr工程
在收录设置中，选择创建代理。当然目录建议是放在同一个文件夹，我新建了一个“素材代理”
其中的预设建议使用GoPro的方案，体积相对H.264较大，该编码专门针对视频中间代理文件，较大程度保留精度。若没有 稳定、变速光流法 等需要高精度计算的精剪效果的话，建议使用H.264，或者您可以导入其他预设。
通常到这里应该有三个项目了，这个时候可以将素材文件夹的素材导入pr中，pr收录会自动启动AME(Adobe Media Encoder)，并进行转码和代理连接
如果收录设置有修改见下图
到这里基本完成了素材的代理生成，现在要让我们的pr工程启用代理
在素材查看器(源)和节目预览(节目)中把切换代理按钮拉下来，分别启动素材代理。可以看到素材被替换为一个左右两边有两条小黑边的代理素材，则为启动了素材代理。
代理素材+工程打包分发 导入+渲染完所有代理素材后，想要把代理素材全部打包交付给(比如手下或外包团队)去做的话
首先解除原素材和代理素材之间的关系
选中所有原素材，设为脱机（我是直接归类成一个文件夹）
如图描述，如果是工作分发，自己按理要保留文件，第二项会删除源文件，看自己需要做选择
这时候就可以准备打包了，如图↑选择项目管理（打开之前请先创建一条空序列，打包需求）
随便创建了一个空序列，打包是按序列来打的
右边记得勾选打包未使用素材，否则是空包。新建工程没有预览文件，路径自定义，下面的估计磁盘空间请按素材代理的总大小来计算（“素材代理”文件夹大小），请确保磁盘上有足够空间进行打包
可以看到打包之后就只有代理素材和工程文件了，打开照样可以进行剪辑工作
回链接素材+渲染  代理的素材会在渲染时候默认替换回原来的素材，可以直接渲染
 分发返回的剪辑工作，需要重新连接原素材，再读第一点。
  修订补充 据随机测试，Gopro预设把文件压缩到大约六分之一到三分之一，H.264大约压缩到十二分之一
因为素材多种且码率参数各有不同，数据仅做概率参考
（抠鼻）反正可以手动创建预设</description>
    </item>
    
    <item>
      <title>后期字幕制作踩过的坑和比较推荐的做法</title>
      <link>/post/%E5%AD%97%E5%B9%95/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%AD%97%E5%B9%95/</guid>
      <description>简单列一下之前自己在制作视频字幕踩过的坑：
 不要使用旧版本AdobePR制作字幕（在PR中，早期的“字幕”和“标题”还是同一个东西的版本）
 尽量避免使用过于生僻的字，如果使用图像作为字幕，可以使用拼接。
  比较推荐的一些做法：
 aegisub制作ass字幕+小丸压制
 使用PS批量导出PSD作为字幕素材（个人比较常用）
  还未尝试的一些做法：
 PR字幕+调整图层
 Arc-Time在线字幕制作
  aegisub制作ass字幕+小丸压制 思路：创建一个包含样式、时间点和台词的字幕文件，只需要粗剪辑即可分工制作，适合台词量大的视频。
 制作：非常方便
 修改：方便
 上手：较难（需要简单看得懂开发文档为优）
  此处摘抄炮姐第一季第一集ass字幕文件（脚本文件）：(其中分号为官方脚本备注，井号为我自己添加的解释备注)
[Script Info] ##这一块指明了这个脚本的详细信息，直接英译中即可 ; Script generated by Aegisub 3.0.2 ; http://www.aegisub.org/ ; // 此字幕由PopSub生成 2014-03-15 17:24:20 ; // 版本: 0.77 ; // popgo_fansub@yahoo.co.jp ; // 欢迎访问漫游天下 http://bbs.popgo.net Title:漫游字幕 Original Script:漫游字幕组 Synch Point:0 ##指明时间偏移量 ScriptType:v4.00+ ##指明脚本版本，通常是4.00+ Collisions:Normal PlayResX:1280 ##指明字幕的渲染的位置 PlayResY:720 Timer:100.</description>
    </item>
    
    <item>
      <title>c&#43;&#43;结合V8模块扩展nodejs功能，用c&#43;&#43;处理复杂计算</title>
      <link>/post/nodejscpp/</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/nodejscpp/</guid>
      <description>我团队在年底举办的青年实践活动“粿奔计划”中，线下游戏RPG采用Nodejs+cpp+html完成业务逻辑。
因为V8引擎由c++完成，可以在cpp中直接引入&amp;lt;v8.h&amp;gt;，通过node-gyp与building.gyp结构文件渲染成一个node模块。cpp作为游戏引擎部分，保留可以被调用的js模块接口，在nodejs中引入模块并按平常调用。
书写cc（cpp）文件 新建一个文件，这里用的是test.cc
#include &amp;lt;node.h&amp;gt; #include &amp;lt;v8.h&amp;gt; #include &amp;lt;string&amp;gt; using namespace v8; using namespace std; void hello(const FunctionCallbackInfo&amp;lt;Value&amp;gt;&amp;amp; args) { Isolate* isolate = Isolate::GetCurrent(); //统一开头 获取js脚本上下文 int value = args[0]-&amp;gt;NumberValue() + args[1]-&amp;gt;NumberValue(); //将第一二个参数的数值相加 Local&amp;lt;Number&amp;gt; num = Number::New(isolate, value); //将相加的value转化为可返回的数据类型 String::Utf8Value param1(args[0]-&amp;gt;ToString()); String::Utf8Value param2(args[1]-&amp;gt;ToString()); //新建String对象，由参数强制转换为String而填充 string ret=string(*param1).string::append(string(*param2)); //以上完成简单的字符转换和衔接 Handle&amp;lt;Value&amp;gt; str = String::NewFromUtf8(isolate, ret.c_str() ); //通过ret.c_str()转化对象后构建新Handle（handle 是指向对象的指针 Local&amp;lt;String&amp;gt; str2= String::NewFromUtf8(isolate,&amp;quot;sss&amp;quot;); //创建一个可以用于返回的String类型，内容为“sss” args.GetReturnValue().Set(str); //获取传入参数的返回参数，设置str为返回参数 //如果传入的参数携带回调函数，则支持： // callback, 使用Cast方法来转换 Local&amp;lt;Function&amp;gt; callback = Local&amp;lt;Function&amp;gt;::Cast(args[1]); Local&amp;lt;Value&amp;gt; argv[1] = { // 拼接String String::Concat(Local&amp;lt;String&amp;gt;::Cast(args[0]), String::NewFromUtf8(isolate, &amp;quot; world&amp;quot;)) }; // 调用回调, 参数: 当前上下文，参数个数，参数列表 callback-&amp;gt;Call(isolate-&amp;gt;GetCurrentContext()-&amp;gt;Global(), 1, argv); } void helloA(const FunctionCallbackInfo&amp;lt;Value&amp;gt;&amp;amp; args) { //.</description>
    </item>
    
    <item>
      <title>最基础的个人文件管理（</title>
      <link>/post/%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description>今天又被某计算机道友提到，顺道一把抄过来。
老问题如：
 当年买了1T磁盘，现在文件太多，系统太卡怎么办 文件太多乱七八糟的，重装系统太麻烦了还得重新整理 用了太久磁盘太慢游戏/PR要开半天怎么办  解决问题的方法：从一开始就做好文件管理（甩锅）
个人文件的管理  从文件访问频度划分，如系统运行的数据和常年不用的冷数据之间的区分，凭个人喜好划分。我是划分成系统盘+热数据盘+冷数据盘（备份区、收藏区、归档区） 从所有权划分，系统的归属系统，用户的归属用户。Windows比如你别把个人文件复制到Program Files里区，类Unix比如/usr/bin/与/bin的划分（当然首先你得直到每个文件夹是做啥用的） 为存储划分功能，如1中提到的备份、收藏、归档。规划一个逃生舱，这部分的数据是需要重点维护的，整个盘坏掉了这部分可以逃生的。 定期整理、归档、清理文件。我是按日期做归档。 备份：使用云备份工具、简单的复制/冗余备份 该用工具的地方就用不要嫌麻烦  工具：Git等版本管理工具、Everything等全盘搜索工具、坚果云等同步工具
折腾的管理  磁盘冗余阵列RAID牺牲空间保证安全 你可能需要数据库来帮你管理文件 NAS系统（出门右转群晖 手写人工智能算法，分析个人文件特征自动做归类管理（Nice  具体场景的文件管理  程序项目开发，工程文件相对较小（没到G级别）优先使用版本管理器 影视制作，素材库文件大，优先使用素材管理器（Bridge或数据库） 多人共同编辑推荐在线合作编辑软件如石墨文档  使用注意 反正磁盘都是有寿命的，减少擦写/减少磁盘随机访问都算是一种保护了
在下载/保存文件的时候做好分类，临时使用的用完记得归档或删除
个人文件不要过度依赖系统（建议定期刷系统
尝试性修改，使用副本进行
etc.
回答一开始的几个问题
A1: 当年买了1T磁盘，现在文件太多，系统太卡怎么办。
Q1: 整理，换SSD，重装系统
A2: 文件太多乱七八糟的，重装系统太麻烦了还得重新整理
Q2: 整理，换SSD，重装系统
A3: 用了太久磁盘太慢游戏/PR要开半天怎么办
Q3: 整理，换SSD，重装系统</description>
    </item>
    
    <item>
      <title>GameJam广州站摸鱼组一日游*2 游记</title>
      <link>/post/%E6%B8%B8%E8%AE%B0/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%B8%B8%E8%AE%B0/</guid>
      <description>两天就能做出一个游戏来？没有奖金、没有奖品，为什么每年近万人参加这个活动？
 GameJam 全称 Global Game Jam（GGJ），前身为Inside Game Jam，原本只是一个测试游戏引擎的小聚会，慢慢聚集了越来越多的独立游戏开发爱好者，国外较为流行，独立游戏界响当当的年会级别金字招牌。如今的GGJ，已经演变成一个“和一群陌生人48小时快速开发游戏demo”的独立游戏制作者交流会，围绕一个keyword展开，吸引全球各个国家地区举办，每年近万人参加，近千款独立游戏于此诞生。
今年广州站在海珠区凤凰新村的石榴仓，1月26日～1月28日
今年关键词：Transmission
有关gamejam其他的详细报道
展览大厅 笔者作为摸鱼组来到现场观摩各位大佬，进门两侧到处都是中手游的独立游戏立牌（承办方）。往里边走是许许多多也许是大家童年记忆的地方：墙上贴满了海报，是游戏发展以来近50年的历史，有游戏的、主机的、游戏实况截图等等，一直延展到拐角处
雅达利的当年
大厅的中央摆了一张桌子，上面摆满了书，有杂志、游戏美术原本、游戏档案（比如尼尔小姐姐）、游戏设计书啊啥的（如果是个图书馆我想蹲一天）
中间的小展台有一台ps4，搞得我心里痒痒的（怎么办，作为一个任豚我的内心动摇了）
后面的一个莫名其妙的站台还摆了一台莫名其妙的游戏机？旁边还有一个VR游戏眼镜
左边有一排接近10米的展览柜，上面基本是大家童年的回忆，有老到大规模集成电路还没普及的游戏机大主板、到插卡的playstation、雅达利、GBA、红白机、任天堂NS及其各种定制版。
作为一个小时候没有游戏机生活的计算机儿童表示真羡慕你们有游戏机的童年。里面还有一些是全球限量版或绝版的玩意
最前面的中央的地带当然是等会主持人要吹水的地方啦，估摸着有一百多人。开启过程主持人还翻了好几次车（雾
由于此次性质是极限创作，所以在发布keyword的时候，主办方希望大家保密，活动结束后再发布。 此次的主题是：Transmission
接下来就到了全场举板的环节：这是每年gamejam的经典场面，一个人拿着电脑或平板，上面书写“求程序员”或“求美术”，举着板子在场地里四处游走寻求人才。
还有某组的混合式缺人
当然楼上 好像是 有一组早就搬了一台大机箱过来的，前面小姐姐的外星人很是耀眼
48小时后的光芒 两天是有很多人熬夜甚至通宵的，门口还有主办方代买的泡面堆饮水机，大家拖家带口台式机显示器成堆
还有很多小哥哥还在现场修改代码
48小时之后大家又回坐到大堂，各个组别开始展示自己的游戏demo
听说抖腿是会传染的？打击感的节奏控制游戏，随着音乐人物抖腿，传递 到车厢里的每一个人
还有把 transmission 解释成 汽车换挡 和 虚拟传输到现实 的，玩家控制一只虚拟小车，尝试翻越过危险地形，然后动作会传输到遥远星球的一辆真实小车（当然是游戏里的啦），小车还不一定能过关的。图为翻车现场
一位没有到场的独立游戏开发者发送视频展示了自己的游戏demo，借用了“沉默的螺旋”这一社会现象，你需要扮演一个传递红色思想的主角，把思想传递 给别人，但电视广播、还有各种各样的阻挠会出现。
内容非常简单甚至是无聊，但制作者对游戏的解释让我不寒而栗
 我们不奢望改变世界，只希望不要被世界所改变
 作者最后引用了这句话来诠释这个游戏
大概优秀的独立游戏制作人，也是个孤独的文学家吧（@小岛秀夫）
其实现场还有其他更多游戏的游戏，碍于自己行程，没有全部跟进～抱歉啦
总结 其实整场活动给人的感觉特别像开源社区各处每年的年会，没有了面向业务面向市场的束缚，非常存粹地在讨论游戏，传递欢乐，维护着被视为神圣但不堪一击的 独立游戏情怀。他们是一群渺小的人，是一群伟大的人。</description>
    </item>
    
    <item>
      <title>阿里云订制个人团队邮箱</title>
      <link>/post/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/</guid>
      <description>域名到邮箱 阿里云提供了自定义域名的个人团队邮箱（看起来是专门针对小团队的），可以用域名专门订制比如@visn.me,@dalao.dat等小团队邮箱，上限50个，每个人有5G独立空间，和2G团队共享空间
首先你当然需要自己的域名，可以选择去狗爹或阿里云里自带的万网买，二手转入或其他途径获得一个域名
买完或转手完域名记得去实名认证。域名在国内实名认证还算比较快的，几个工作日就能完成。
阿里云控制台里有如图企业邮箱模块。由于都是免费的而且过程较为粗暴，相信习惯了一把梭的你都会的（其实是创建的时候没截图）
确认解析可达 申请成功后，会有一个官方管理员账号，需要登陆并修改密码。登陆网址是阿里云企业邮箱官网，默认用户名是postmaster@*.*。
按照官方手册的指引说是进了管理员账号然后进入域管理，找了半天没这三个字。这家伙在右上角的扳手🔧图案这。
刚创建的邮箱域名，需要同步域名服务器会有延迟，在域管理里面的邮箱业务-&amp;gt;邮箱运维-&amp;gt;检查MX解析设置解析，等待直到解析成功。期间可以返回阿里云控制台的DNS解析记录（会有好几条解析到mxhichina.com），看看有没有解析成功。
管理员工 进入域管理剩下的操作就很简单了，添加部门、添加员工什么的
新建账户也很简单，要求用户名、邮箱名和初始密码。员工登陆的时候会要求重制密码。
每个新员工打开的时候会收到一封欢迎信，可订制的在域管理中的企业定制
创建合作群组 在邮箱界面可以创建一个邮件组，邮件组的成员有一个单独的邮箱地址（如jishu@*.*，表示发给技术部门所有人），发送到这个地址的邮件会分别提醒群组里的每个人。
不过主要是能有共享的网盘空间（为什么不用百度云
其他操作都是比较简单的小白操作了（跑
补充 添加到邮箱大师/QQ邮箱那些也是一把梭，中间会要求你确认收发代理，会自动填好，确认即可</description>
    </item>
    
    <item>
      <title>Java Rebase</title>
      <link>/post/java-rebase/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/java-rebase/</guid>
      <description>写在前面 Java囧境 作为面向对象炒得最火的语言，Java曾依靠虚拟机的跨平台特性撑起计算机半臂江山。
时至今日，Java已经略显疲惫，有些高不成低不就的感觉。
 试图培养成一种面向通用的语言，在py、R、Go等面向专业语言诞生之后，java的通用优势不足。  在安卓领域，第二代第三代JVM语言横空出世，Kotlin快速夺取市场。 在服务器领域，因为历史遗留问题JavaSRE目前依然为主流，但不是长久之计。新的服务器架构快速迭代，后起之秀Py、nodejs也在快速增长。 桌面领域Java一直有力使不出来，底部依赖大、自家GUI又刚不过qt系列 语言语法及其体系相对冗长、功能迭代速度相对较慢，底层相对重量级  甲骨文的收购、商业化与闭源一定程度上延迟了技术层面的增长 曾经的跨平台特性已经不再是其核心竞争力 Java的体系相当庞大，光是服务器框架就可以学完大学四年  （其实感觉有点像Apache与Nginx port80之争那份漫画，老一辈与晚辈各自的优势）
所提的点不是贬低Java，是较理性地描述目前的问题
个人发展瓶颈 本身自己是学习Java内容居多的，从高中一本《从如坑到弃疗》，到大学起来接触各种教新的技术。
大学生迷茫直观上来说，无非分为两种
 了解得太少 了解得太多  中学的时候不知道java是什么，一直摇摆不定学不学计算机，特迷茫。报考了志愿进了计算机这一大坑，诶，目标算是定下来了，不会太迷茫，java就继续学下去。直到接触了更多更先进的技术，再次陷入迷茫。
断舍离提供了一些方法论来解决问题，做出了决定：放弃java，转向其他语言
上升到另一个层面，变成语言无非只是解决问题的方法而以，所以这个决定并不是什么大事。我现在要做的是把大学这一两年来断断续续学到的Java的内容进行归纳总结，毕竟编程设计语言是具有共性的，在Java学到的解决问题的思路，完全可以应用到其他语言、学科和领域。所以在此开了这篇文章。
所以标题引用了git中一个专业名词Rebase，更直观的感受是更换基底的意思。
文所涉及的内容，是个人从Java中学习而来的，并不是Java独有的，请勿混淆
Java总览 语言特性
 面向对象（封装继承多态，不允许多重继承） 跨平台(once code, run debug everywhere) 底层解释型（虚拟机机器码） 安全检查（你可能需要Rust） 强类型、静态语言 内存垃圾gc 大小写严格、默认驼峰命名法  技术与名词 JVM(Java Virtual Machine) Java实体运行软件，通过编程Java代码，编译成class机器码，由JVM适配平台，执行机器码内容（以此实现跨平台）。当然，JVM不一定由Java编写，使用Ruby语言+JRuby编译器等照样可以调用JVM。具体的计算机程序编译过程请自行了解。
JRE(Java Runtime Environment)Java运行环境，包含一个JVM和一系列标准类库
JDK(Java Development Kit) 程序开发库，包含了接口等一系列开发必备软件，通过Java语法导入、调用
JDK的实体文件结构
   目录 描述     \bin 编译器、测试与调用等工具   \demo 代码示例   \docs html的类库文档   \include 用于编译本地库、本地方法的文件   \jre 运行环境所需的文件   \lib 类库文件   \src 类库源文件    SE、ME、EE Java的三个不同版本，分别对应小型设备、桌面与简单服务器、企业及服务器三种平台</description>
    </item>
    
    <item>
      <title>跳出OO思想与OODP-杂记</title>
      <link>/post/disoodp/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/disoodp/</guid>
      <description> 跳出面向对象思想 整理了一遍自己的笔记，里面有不少关于面向对象设计的内容，整理完放到了Gitbook，里面包括了OO原则、二十三设计模式、跳出面向对象思想三个部分。其中相对来说较为具有启发性的是第三部分的跳出面向对象思想，引用了来自大佬Casa Taloyum博客的三篇跳出面向对象思想。
更具体的关于面向对象思维的局限性可以见 面向对象编程的弊端是什么？ - invalid s的回答 - 知乎。
其最核心的问题在于，在所有的编程设计都是辅助完成业务的前提下，不同的手段（面向过程、面向对象、面向函数等）能否尽力交付任务。也不能否认面向对象思维给计算机带来的飞跃，在此基础上会有更先进的思维，这是大家愿意看到的。
关于设计模式 知乎的回答里业界大佬也以相对实际使用的角度提到了设计模式：“一切皆对象实质上是在鼓励堆砌毫无意义的喋喋不休，并且用这种战术层面都蠢的要命的喋喋不休来代替战略层面的考量。大部分人——注意，不是个别人——甚至被这种无意义的喋喋不休搞出了神经质，以至于非要在喋喋不休中找出意义：没错，我说的就是设计模式驱动编程，以及如此理解面向对象编程。”
承认其所提到的，“大家使用过度，反而忘记了设计的初衷”这一部分内容
作者原用于纠正“所以用面向对象语言写出来的东西一定更清晰、易懂”的误解（虽然我也比较同意），单独来说更偏向狭义上的设计模式；设计模式并非只存在于面向对象设计之中，广义上是为所有的程序设计提供了解决方案的思路。
设计模式是一种抽象“抽象”的技术（或是艺术），GoF设计模式一书具有划时代意义也在于它完成了对抽象逻辑的一次抽象，也给软件工程提供了一个不同角度的世界观和方法论。引用书中一段较为中肯的话
 本书中涉及的设计模式并不描述新的或未经证实的设计，我们只收录那些在不同系统中多次使用过的成功设计。这些设计的绝大部分以往并无文本记录，它们或是来源于面向对象设计者圈子里的非正式交流，或是来源于某些成功的面向对象系统的某些部分，但对设计新手来说，这些东西是很难学得到的。尽管这些设计不包括新的思路，但我们用一种新的、便于理解的方式将其展现给读者，即：具有统一格式的、已分类编目的若干组设计模式。
 而我们可能更需要注意的是避免一些问题，如
 只了解模式、不了解原因、场景 过度设计、使用，忘记初衷问题  设计模式应当解决实际的问题，理论辅佐完成实践 设计模式应当变成一种行业内交流的货币，用于沟通交流
相关链接
 面向对象程序设计 - wiki 知乎 - 面向对象编程的弊端是什么？ 知乎 - 设计模式有何不妥，所谓的荼毒体现在哪？ 知乎 - 如何正确地使用设计模式？ Arch Linux 哲学  </description>
    </item>
    
    <item>
      <title>Archlinux 一把梭</title>
      <link>/post/arch-i8so/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/arch-i8so/</guid>
      <description>记录下平时可能会用到的（反正也是查阅用的）一把锁指令
里面大多数是简单基础命令各位大神就不用看了
同学你听过Archlinux吗没有 Wifi热点 软件包：create_ap(community)
sudo create_ap &amp;lt;无线网卡&amp;gt;[&amp;lt;有线网卡&amp;gt;][&amp;lt;SSID&amp;gt;[&amp;lt;passwd&amp;gt;]]  找不到网卡就ifconfig - 软件包：net-tools(core)
Unreal Engine 4 虚幻引擎在Windows上直接有引擎管理器，Linux上目前只能从github下载源码自己编译。（官方有贴build on liunx的）。
感谢axionl大佬提醒yaourt仓库里面有，也是gitclone，只是文件太大自己网络状况也不是很理想（手动gitclone断流有点吃不消），可以直接下载zip
一些基础工具如git etc.自行安装，补安装mono clang35 dos2unix cmake
 UnrealEngine4是隶属组织没有公开，加入组织fork一下 clone最新/稳定的版本git clone https://github.com/EpicGames/UnrealEngine.git,大小接近两个G（后面放着没看了忘记具体多大了），也可以指定版本 进入目录，依次执行Setup.sh，GenerateProjectFiles.sh检查构建环境 make UE4Editor-Linux-Debug或直接make（睡觉去 启动器位置：./Engine/Binaries/Linux/UE4Editor（如果刚刚执行UE4Editor-Linux-Debug的话是运行UE4Editor-Linux-Debug，其他类似） 玩得开心  可能出现的问题
 git clone时候文件过大水管过小，断流会收到github的EOF，请保持网络通畅（为啥不直接打开网页下载呢） 请保持有正确可用的平台环境和足够的计算性能和资源，毕竟需要存储、检查、编译等 之前有一个版本直接就找不到对应库文件，编译时候各种爆炸 有一个版本跑完报ShaderCompileWorker 没有被编译 有些版本跑make UE4Editor-Linux-Debug没问题而make爆炸，也有反过来的。看脸 总之，有问题就把滚包+换版本编译  实在不行的朋友
 更换发行版，去debian受气 更换操作系统，Windows老可爱了 放弃使用UE4  NTFS只读系统 软件包：ntfs-3g / ntfs-config(aur)
然后卸载+挂载 / reboom
设置开机启动ruijie… ruijie的启动脚本（包括网卡启动）已经写好封装在/usr/bin/goruijie中
sudo touch /usr/lib/systemd/system/goruijie.service  service配置文件可见鸟哥在gitbook的整理
[Unit] Description=Ruijie AutoSetup Service After=network.</description>
    </item>
    
    <item>
      <title>First Update</title>
      <link>/post/first/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/first/</guid>
      <description>First Update 从第一次磁盘损坏开始就养成了文件管理的习惯
到后来每月一换系统，文件迁移什么的就不太方便
通常习惯把笔记、解决方案之类的放在逃生舱里，方便一键弹出一把梭
系列笔记存放GitBook</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/davinciresolve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/davinciresolve/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>